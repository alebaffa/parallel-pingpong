[INFO ] 2020-07-01T14:30:05,526Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200701-142957.042\nodes\0\cordapps] {}
[INFO ] 2020-07-01T14:30:05,551Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/corda/samples-kotlin/Basic/pingpong/workflows-kotlin/build/mock-network/20200701-142957.042/nodes/0/cordapps/custom-cordapp_1_7_17c02e00-7ad7-4b7b-936b-e7489bee1b26.jar, rootPackageName=null) {}
[INFO ] 2020-07-01T14:30:05,561Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/corda/samples-kotlin/Basic/pingpong/workflows-kotlin/build/mock-network/20200701-142957.042/nodes/0/cordapps/custom-cordapp_1_7_17c02e00-7ad7-4b7b-936b-e7489bee1b26.jar {}
[INFO ] 2020-07-01T14:30:06,700Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-01T14:30:06,905Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-01T14:30:06,982Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-01T14:30:07,272Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary, L=London, C=GB, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-01T14:29:56.945Z
      epoch=1
  } {}
[INFO ] 2020-07-01T14:30:13,409Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:13,414Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200701-142957.042\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:13,414Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:13,491Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:13,631Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:13,642Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:15,961Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:16,591Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:16,593Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:16,599Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:16,599Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:16,690Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:16,742Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-01T14:30:16,764Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-01T14:30:16,764Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-01T14:30:17,039Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-01T14:30:17,049Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-01T14:30:17,049Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=7, serial=1593613817049) {}
[INFO ] 2020-07-01T14:30:17,055Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary, L=London, C=GB {}
[INFO ] 2020-07-01T14:30:17,223Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=7, serial=1593613817049) {}
[INFO ] 2020-07-01T14:30:17,304Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-01T14:30:17,320Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-01T14:30:17,323Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-01T14:30:17,333Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=7, serial=1593613817049) {}
[INFO ] 2020-07-01T14:30:17,373Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:30:17,387Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-01T14:30:17,394Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-01T14:30:17,912Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=7, serial=1593613817049) {}
[INFO ] 2020-07-01T14:30:17,945Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=7, serial=1593613817049) {}
[INFO ] 2020-07-01T14:30:17,949Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:30:17,950Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=7, serial=1593613817049) {}
[INFO ] 2020-07-01T14:30:17,950Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:30:18,067Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200701-142957.042\nodes\1\cordapps] {}
[INFO ] 2020-07-01T14:30:18,068Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/corda/samples-kotlin/Basic/pingpong/workflows-kotlin/build/mock-network/20200701-142957.042/nodes/1/cordapps/custom-cordapp_1_7_17c02e00-7ad7-4b7b-936b-e7489bee1b26.jar, rootPackageName=null) {}
[INFO ] 2020-07-01T14:30:18,068Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/corda/samples-kotlin/Basic/pingpong/workflows-kotlin/build/mock-network/20200701-142957.042/nodes/1/cordapps/custom-cordapp_1_7_17c02e00-7ad7-4b7b-936b-e7489bee1b26.jar {}
[INFO ] 2020-07-01T14:30:18,103Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-01T14:30:18,104Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-01T14:30:18,106Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-01T14:30:18,145Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary, L=London, C=GB, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-01T14:29:56.945Z
      epoch=1
  } {}
[INFO ] 2020-07-01T14:30:18,907Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:18,909Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200701-142957.042\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:18,909Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:18,936Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:18,940Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:18,940Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:19,150Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:19,162Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:19,163Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:19,167Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:19,167Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:19,235Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:19,241Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-01T14:30:19,245Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-01T14:30:19,245Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-01T14:30:19,371Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-01T14:30:19,373Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-01T14:30:19,402Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-01T14:30:19,402Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1593613819402) {}
[INFO ] 2020-07-01T14:30:19,404Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-01T14:30:19,413Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1593613819402) {}
[INFO ] 2020-07-01T14:30:19,422Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-01T14:30:19,423Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-01T14:30:19,423Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-01T14:30:19,428Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1593613819402) {}
[INFO ] 2020-07-01T14:30:19,436Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:30:19,458Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1593613819402) {}
[INFO ] 2020-07-01T14:30:19,460Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=7, serial=1593613817049) {}
[INFO ] 2020-07-01T14:30:19,463Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary, L=London, C=GB {}
[INFO ] 2020-07-01T14:30:19,480Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1593613819402) {}
[INFO ] 2020-07-01T14:30:19,482Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-01T14:30:19,496Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1593613819402) {}
[INFO ] 2020-07-01T14:30:19,496Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:30:19,497Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1593613819402) {}
[INFO ] 2020-07-01T14:30:19,497Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:30:19,507Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200701-142957.042\nodes\2\cordapps] {}
[INFO ] 2020-07-01T14:30:19,507Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/corda/samples-kotlin/Basic/pingpong/workflows-kotlin/build/mock-network/20200701-142957.042/nodes/2/cordapps/custom-cordapp_1_7_17c02e00-7ad7-4b7b-936b-e7489bee1b26.jar, rootPackageName=null) {}
[INFO ] 2020-07-01T14:30:19,507Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/corda/samples-kotlin/Basic/pingpong/workflows-kotlin/build/mock-network/20200701-142957.042/nodes/2/cordapps/custom-cordapp_1_7_17c02e00-7ad7-4b7b-936b-e7489bee1b26.jar {}
[INFO ] 2020-07-01T14:30:19,538Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-01T14:30:19,539Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-01T14:30:19,541Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-01T14:30:19,587Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary, L=London, C=GB, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-01T14:29:56.945Z
      epoch=1
  } {}
[INFO ] 2020-07-01T14:30:20,233Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:20,238Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200701-142957.042\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:20,238Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:20,289Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:20,304Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:20,305Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:20,436Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:20,444Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:20,445Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:20,449Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:20,449Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:20,509Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:30:20,517Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-01T14:30:20,519Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-01T14:30:20,519Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-01T14:30:20,636Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-01T14:30:20,638Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-01T14:30:20,660Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-01T14:30:20,660Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1593613820660) {}
[INFO ] 2020-07-01T14:30:20,662Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-01T14:30:20,668Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1593613820660) {}
[INFO ] 2020-07-01T14:30:20,674Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-01T14:30:20,674Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-01T14:30:20,674Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-01T14:30:20,678Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1593613820660) {}
[INFO ] 2020-07-01T14:30:20,683Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:30:20,701Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1593613820660) {}
[INFO ] 2020-07-01T14:30:20,702Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary, L=London, C=GB], platformVersion=7, serial=1593613817049) {}
[INFO ] 2020-07-01T14:30:20,704Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary, L=London, C=GB {}
[INFO ] 2020-07-01T14:30:20,713Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1593613820660) {}
[INFO ] 2020-07-01T14:30:20,715Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-01T14:30:20,725Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=7, serial=1593613819402) {}
[INFO ] 2020-07-01T14:30:20,726Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-07-01T14:30:20,735Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1593613820660) {}
[INFO ] 2020-07-01T14:30:20,736Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-07-01T14:30:20,744Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1593613820660) {}
[INFO ] 2020-07-01T14:30:20,744Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:30:20,744Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=7, serial=1593613820660) {}
[INFO ] 2020-07-01T14:30:20,744Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:30:20,752Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.pingpong.flows.Ping to initiate net.corda.examples.pingpong.flows.Pong (version 1) {}
[INFO ] 2020-07-01T14:30:20,756Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.pingpong.flows.Ping to initiate net.corda.examples.pingpong.flows.Pong (version 1) {}
[INFO ] 2020-07-01T14:30:20,971Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2020-07-01T14:30:21,125Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2020-07-01T14:30:21,133Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2020-07-01T14:47:25,192Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200701-144717.967\nodes\0\cordapps] {}
[INFO ] 2020-07-01T14:47:25,216Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/corda/samples-kotlin/Basic/pingpong/workflows-kotlin/build/mock-network/20200701-144717.967/nodes/0/cordapps/net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153.jar, rootPackageName=null) {}
[INFO ] 2020-07-01T14:47:25,231Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/corda/samples-kotlin/Basic/pingpong/workflows-kotlin/build/mock-network/20200701-144717.967/nodes/0/cordapps/net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153.jar {}
[INFO ] 2020-07-01T14:47:26,438Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-01T14:47:26,663Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-01T14:47:26,736Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-01T14:47:26,844Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow to initiate net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow (version 1) {}
[INFO ] 2020-07-01T14:47:26,845Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.pingpong.flows.FlowParallelMessagingTests$StagedSenderFlow to initiate net.corda.examples.pingpong.flows.FlowParallelMessagingTests$StagedRecipientFlow (version 1) {}
[INFO ] 2020-07-01T14:47:27,083Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-01T14:47:17.967Z
      epoch=1
  } {}
[INFO ] 2020-07-01T14:47:32,858Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:32,866Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200701-144717.967\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:32,866Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:32,933Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:33,042Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:33,049Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:35,710Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:36,383Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:36,386Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:36,391Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:36,391Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:36,474Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:36,521Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-01T14:47:36,549Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-01T14:47:36,549Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-01T14:47:36,827Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-07-01T14:47:36,841Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-01T14:47:36,841Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1593614856841) {}
[INFO ] 2020-07-01T14:47:36,848Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-01T14:47:37,017Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1593614856841) {}
[INFO ] 2020-07-01T14:47:37,072Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-01T14:47:37,088Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-01T14:47:37,091Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-01T14:47:37,099Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1593614856841) {}
[INFO ] 2020-07-01T14:47:37,134Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:47:37,145Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-07-01T14:47:37,149Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-07-01T14:47:37,629Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1593614856841) {}
[INFO ] 2020-07-01T14:47:37,666Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1593614856841) {}
[INFO ] 2020-07-01T14:47:37,670Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:47:37,671Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1593614856841) {}
[INFO ] 2020-07-01T14:47:37,671Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:47:37,683Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200701-144717.967\nodes\1\cordapps] {}
[INFO ] 2020-07-01T14:47:37,683Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/corda/samples-kotlin/Basic/pingpong/workflows-kotlin/build/mock-network/20200701-144717.967/nodes/1/cordapps/net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153.jar, rootPackageName=null) {}
[INFO ] 2020-07-01T14:47:37,683Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/corda/samples-kotlin/Basic/pingpong/workflows-kotlin/build/mock-network/20200701-144717.967/nodes/1/cordapps/net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153.jar {}
[INFO ] 2020-07-01T14:47:37,718Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-01T14:47:37,720Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-01T14:47:37,722Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-01T14:47:37,772Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow to initiate net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow (version 1) {}
[INFO ] 2020-07-01T14:47:37,772Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.pingpong.flows.FlowParallelMessagingTests$StagedSenderFlow to initiate net.corda.examples.pingpong.flows.FlowParallelMessagingTests$StagedRecipientFlow (version 1) {}
[INFO ] 2020-07-01T14:47:37,777Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-01T14:47:17.967Z
      epoch=1
  } {}
[INFO ] 2020-07-01T14:47:38,643Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:38,645Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200701-144717.967\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:38,645Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:38,679Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:38,698Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:38,699Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:39,099Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:39,126Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:39,128Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:39,132Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:39,132Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:39,276Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:39,283Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-01T14:47:39,287Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-01T14:47:39,287Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-01T14:47:39,423Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-01T14:47:39,425Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-01T14:47:39,462Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-01T14:47:39,462Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=SenderNode, L=Madrid, C=ES], platformVersion=7, serial=1593614859462) {}
[INFO ] 2020-07-01T14:47:39,465Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=SenderNode, L=Madrid, C=ES {}
[INFO ] 2020-07-01T14:47:39,474Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=SenderNode, L=Madrid, C=ES], platformVersion=7, serial=1593614859462) {}
[INFO ] 2020-07-01T14:47:39,484Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-01T14:47:39,485Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-01T14:47:39,485Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-01T14:47:39,491Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=SenderNode, L=Madrid, C=ES], platformVersion=7, serial=1593614859462) {}
[INFO ] 2020-07-01T14:47:39,499Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:47:39,522Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=SenderNode, L=Madrid, C=ES], platformVersion=7, serial=1593614859462) {}
[INFO ] 2020-07-01T14:47:39,524Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1593614856841) {}
[INFO ] 2020-07-01T14:47:39,526Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-01T14:47:39,544Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=SenderNode, L=Madrid, C=ES], platformVersion=7, serial=1593614859462) {}
[INFO ] 2020-07-01T14:47:39,546Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=SenderNode, L=Madrid, C=ES {}
[INFO ] 2020-07-01T14:47:39,562Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=SenderNode, L=Madrid, C=ES], platformVersion=7, serial=1593614859462) {}
[INFO ] 2020-07-01T14:47:39,562Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:47:39,563Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=SenderNode, L=Madrid, C=ES], platformVersion=7, serial=1593614859462) {}
[INFO ] 2020-07-01T14:47:39,563Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:47:39,579Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200701-144717.967\nodes\2\cordapps] {}
[INFO ] 2020-07-01T14:47:39,580Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/corda/samples-kotlin/Basic/pingpong/workflows-kotlin/build/mock-network/20200701-144717.967/nodes/2/cordapps/net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153.jar, rootPackageName=null) {}
[INFO ] 2020-07-01T14:47:39,580Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/corda/samples-kotlin/Basic/pingpong/workflows-kotlin/build/mock-network/20200701-144717.967/nodes/2/cordapps/net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153.jar {}
[INFO ] 2020-07-01T14:47:39,637Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-01T14:47:39,639Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-01T14:47:39,640Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-01T14:47:39,676Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow to initiate net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow (version 1) {}
[INFO ] 2020-07-01T14:47:39,676Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.pingpong.flows.FlowParallelMessagingTests$StagedSenderFlow to initiate net.corda.examples.pingpong.flows.FlowParallelMessagingTests$StagedRecipientFlow (version 1) {}
[INFO ] 2020-07-01T14:47:39,681Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-01T14:47:17.967Z
      epoch=1
  } {}
[INFO ] 2020-07-01T14:47:40,368Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:40,371Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200701-144717.967\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:40,371Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:40,398Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:40,402Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:40,402Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:40,657Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:40,675Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:40,676Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:40,681Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:40,681Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:40,797Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:40,805Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-01T14:47:40,810Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-01T14:47:40,810Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-01T14:47:40,955Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-01T14:47:40,957Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-01T14:47:40,975Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-01T14:47:40,975Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode1, L=Madrid, C=ES], platformVersion=7, serial=1593614860975) {}
[INFO ] 2020-07-01T14:47:40,977Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=RecipientNode1, L=Madrid, C=ES {}
[INFO ] 2020-07-01T14:47:40,984Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode1, L=Madrid, C=ES], platformVersion=7, serial=1593614860975) {}
[INFO ] 2020-07-01T14:47:40,990Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-01T14:47:40,990Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-01T14:47:40,991Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-01T14:47:40,995Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode1, L=Madrid, C=ES], platformVersion=7, serial=1593614860975) {}
[INFO ] 2020-07-01T14:47:41,000Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:47:41,021Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode1, L=Madrid, C=ES], platformVersion=7, serial=1593614860975) {}
[INFO ] 2020-07-01T14:47:41,022Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1593614856841) {}
[INFO ] 2020-07-01T14:47:41,024Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-01T14:47:41,033Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode1, L=Madrid, C=ES], platformVersion=7, serial=1593614860975) {}
[INFO ] 2020-07-01T14:47:41,034Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=RecipientNode1, L=Madrid, C=ES {}
[INFO ] 2020-07-01T14:47:41,043Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=SenderNode, L=Madrid, C=ES], platformVersion=7, serial=1593614859462) {}
[INFO ] 2020-07-01T14:47:41,044Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=SenderNode, L=Madrid, C=ES {}
[INFO ] 2020-07-01T14:47:41,054Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode1, L=Madrid, C=ES], platformVersion=7, serial=1593614860975) {}
[INFO ] 2020-07-01T14:47:41,056Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=RecipientNode1, L=Madrid, C=ES {}
[INFO ] 2020-07-01T14:47:41,066Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode1, L=Madrid, C=ES], platformVersion=7, serial=1593614860975) {}
[INFO ] 2020-07-01T14:47:41,066Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:47:41,067Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode1, L=Madrid, C=ES], platformVersion=7, serial=1593614860975) {}
[INFO ] 2020-07-01T14:47:41,067Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:47:41,074Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200701-144717.967\nodes\3\cordapps] {}
[INFO ] 2020-07-01T14:47:41,076Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/E:/workspace/corda/samples-kotlin/Basic/pingpong/workflows-kotlin/build/mock-network/20200701-144717.967/nodes/3/cordapps/net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153.jar, rootPackageName=null) {}
[INFO ] 2020-07-01T14:47:41,076Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/E:/workspace/corda/samples-kotlin/Basic/pingpong/workflows-kotlin/build/mock-network/20200701-144717.967/nodes/3/cordapps/net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153.jar {}
[INFO ] 2020-07-01T14:47:41,103Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: false {}
[INFO ] 2020-07-01T14:47:41,104Z [Test worker] internal.InternalMockNetwork$MockNode. - Flow external operation executor has a max of 2 threads {}
[INFO ] 2020-07-01T14:47:41,105Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-07-01T14:47:41,138Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow to initiate net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow (version 1) {}
[INFO ] 2020-07-01T14:47:41,138Z [Test worker] internal.NodeFlowManager. - Registered net.corda.examples.pingpong.flows.FlowParallelMessagingTests$StagedSenderFlow to initiate net.corda.examples.pingpong.flows.FlowParallelMessagingTests$StagedRecipientFlow (version 1) {}
[INFO ] 2020-07-01T14:47:41,144Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-07-01T14:47:17.967Z
      epoch=1
  } {}
[INFO ] 2020-07-01T14:47:41,708Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:41,713Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200701-144717.967\nodes\3\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:41,713Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:41,739Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:41,749Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:41,749Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:41,860Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:41,869Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:41,870Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:41,875Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:41,875Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:41,919Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-07-01T14:47:41,924Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-07-01T14:47:41,926Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-01T14:47:41,926Z [Test worker] factory.BaseSessionFactoryFactory. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-01T14:47:42,015Z [Test worker] factory.BaseSessionFactoryFactory. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-07-01T14:47:42,016Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-07-01T14:47:42,039Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-07-01T14:47:42,039Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode2, L=Madrid, C=ES], platformVersion=7, serial=1593614862039) {}
[INFO ] 2020-07-01T14:47:42,042Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=RecipientNode2, L=Madrid, C=ES {}
[INFO ] 2020-07-01T14:47:42,048Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode2, L=Madrid, C=ES], platformVersion=7, serial=1593614862039) {}
[INFO ] 2020-07-01T14:47:42,053Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-07-01T14:47:42,053Z [Test worker] internal.MockNodeMessagingService. - Status change to true {}
[INFO ] 2020-07-01T14:47:42,053Z [Test worker] internal.InternalMockNetwork$MockNode. - MessagingService active change to: true {}
[INFO ] 2020-07-01T14:47:42,057Z [MockNode-4-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode2, L=Madrid, C=ES], platformVersion=7, serial=1593614862039) {}
[INFO ] 2020-07-01T14:47:42,062Z [MockNode-4-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:47:42,081Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode2, L=Madrid, C=ES], platformVersion=7, serial=1593614862039) {}
[INFO ] 2020-07-01T14:47:42,082Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=7, serial=1593614856841) {}
[INFO ] 2020-07-01T14:47:42,084Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-07-01T14:47:42,094Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode2, L=Madrid, C=ES], platformVersion=7, serial=1593614862039) {}
[INFO ] 2020-07-01T14:47:42,095Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=RecipientNode2, L=Madrid, C=ES {}
[INFO ] 2020-07-01T14:47:42,105Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=SenderNode, L=Madrid, C=ES], platformVersion=7, serial=1593614859462) {}
[INFO ] 2020-07-01T14:47:42,106Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=SenderNode, L=Madrid, C=ES {}
[INFO ] 2020-07-01T14:47:42,114Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode2, L=Madrid, C=ES], platformVersion=7, serial=1593614862039) {}
[INFO ] 2020-07-01T14:47:42,115Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=RecipientNode2, L=Madrid, C=ES {}
[INFO ] 2020-07-01T14:47:42,124Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode1, L=Madrid, C=ES], platformVersion=7, serial=1593614860975) {}
[INFO ] 2020-07-01T14:47:42,125Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=RecipientNode1, L=Madrid, C=ES {}
[INFO ] 2020-07-01T14:47:42,132Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode2, L=Madrid, C=ES], platformVersion=7, serial=1593614862039) {}
[INFO ] 2020-07-01T14:47:42,133Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=RecipientNode2, L=Madrid, C=ES {}
[INFO ] 2020-07-01T14:47:42,142Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode2, L=Madrid, C=ES], platformVersion=7, serial=1593614862039) {}
[INFO ] 2020-07-01T14:47:42,142Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:47:42,142Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=RecipientNode2, L=Madrid, C=ES], platformVersion=7, serial=1593614862039) {}
[INFO ] 2020-07-01T14:47:42,142Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-07-01T14:47:42,728Z [Time-limited test] identity.PersistentIdentityService. - Linking: 4FD6377AB3E36B8718CC29471AB812C214C70B892D51A094CFFE3AC1A3642177 to O=SenderNode, L=Madrid, C=ES {}
[INFO ] 2020-07-01T14:47:42,742Z [Time-limited test] identity.PersistentIdentityService. - Linking: A977FD085BCEEB8FC46D1032E014704462A4AC53590CA77037D6BF8AD5D1EDC6 to O=RecipientNode1, L=Madrid, C=ES {}
[INFO ] 2020-07-01T14:47:42,754Z [Time-limited test] identity.PersistentIdentityService. - Linking: 2DF0E9D7F88BA8F27B72A04DCFA9B217B2A25BA148AE0A68BF3CDF62A587BC9E to O=RecipientNode2, L=Madrid, C=ES {}
[INFO ] 2020-07-01T14:47:42,947Z [Mock network] corda.flow. - Flow raised an error: A flow session can only appear once as argument.. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000011, flow-id=1167b56f-4696-4b0b-9951-21d9ae5aa843, invocation_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, invocation_timestamp=2020-07-01T14:47:42.943Z, origin=Only For Testing, session_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, session_timestamp=2020-07-01T14:47:42.943Z, thread-id=153}
[INFO ] 2020-07-01T14:47:42,950Z [Mock network] statemachine.StaffedFlowHospital. - Flow [1167b56f-4696-4b0b-9951-21d9ae5aa843] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, timestamp: 2020-07-01T14:47:42.943Z, entityType: Invocation, sessionId=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, timestamp: 2020-07-01T14:47:42.943Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={SessionId(toLong=-2412721118403211759)=Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-2412721118403211759), additionalEntropy=4917914562914719990)}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=1A07E367B40E4C1F959034C69CDE6575D6A573D4CDA923B1C4176D62F3F6B343), errorState=Clean, numberOfSuspends=0), flowLogic=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow@5ffa6545, pendingDeduplicationHandlers=[], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf) {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000011, flow-id=1167b56f-4696-4b0b-9951-21d9ae5aa843, invocation_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, invocation_timestamp=2020-07-01T14:47:42.943Z, origin=Only For Testing, session_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, session_timestamp=2020-07-01T14:47:42.943Z, thread-id=153}
[INFO ] 2020-07-01T14:47:42,953Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000011, flow-id=1167b56f-4696-4b0b-9951-21d9ae5aa843, invocation_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, invocation_timestamp=2020-07-01T14:47:42.943Z, origin=Only For Testing, session_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, session_timestamp=2020-07-01T14:47:42.943Z, thread-id=153}
java.lang.IllegalArgumentException: A flow session can only appear once as argument.
	at net.corda.core.flows.FlowLogic.enforceNoDuplicates(FlowLogic.kt:555) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll(FlowLogic.kt:340) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll$default(FlowLogic.kt:338) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow.call(FlowParallelMessagingTests.kt:231) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow.call(FlowParallelMessagingTests.kt:224) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-01T14:47:42,961Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000011, flow-id=1167b56f-4696-4b0b-9951-21d9ae5aa843, invocation_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, invocation_timestamp=2020-07-01T14:47:42.943Z, origin=Only For Testing, session_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, session_timestamp=2020-07-01T14:47:42.943Z, thread-id=153}
java.lang.IllegalArgumentException: A flow session can only appear once as argument.
	at net.corda.core.flows.FlowLogic.enforceNoDuplicates(FlowLogic.kt:555) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll(FlowLogic.kt:340) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll$default(FlowLogic.kt:338) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow.call(FlowParallelMessagingTests.kt:231) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow.call(FlowParallelMessagingTests.kt:224) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-01T14:47:42,981Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [1167b56f-4696-4b0b-9951-21d9ae5aa843] errored, dumping all transitions:

 --- Transition of flow [1167b56f-4696-4b0b-9951-21d9ae5aa843] ---
  Timestamp: 2020-07-01T14:47:42.946Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[1167b56f-4696-4b0b-9951-21d9ae5aa843], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, timestamp: 2020-07-01T14:47:42.943Z, entityType: Invocation, sessionId=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, timestamp: 2020-07-01T14:47:42.943Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=1A07E367B40E4C1F959034C69CDE6575D6A573D4CDA923B1C4176D62F3F6B343), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2ffb257])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2ffb257])
    SignalFlowHasStarted(flowId=[1167b56f-4696-4b0b-9951-21d9ae5aa843])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2ffb257]
    []


 --- Transition of flow [1167b56f-4696-4b0b-9951-21d9ae5aa843] ---
  Timestamp: 2020-07-01T14:47:42.947Z
  Event: InitiateFlow(destination=O=RecipientNode1, L=Madrid, C=ES, wellKnownParty=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    AddSessionBinding(flowId=[1167b56f-4696-4b0b-9951-21d9ae5aa843], sessionId=SessionId(toLong=-2412721118403211759))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:42.944Z
    2020-07-01T14:47:42.947Z
checkpoint.sessions.SessionId(toLong=-2412721118403211759): 
    null
    Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-2412721118403211759), additionalEntropy=4917914562914719990)


 --- Transition of flow [1167b56f-4696-4b0b-9951-21d9ae5aa843] ---
  Timestamp: 2020-07-01T14:47:42.962Z
  Event: Error(exception=java.lang.IllegalArgumentException: A flow session can only appear once as argument.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:42.947Z
    2020-07-01T14:47:42.949Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=5781534540466295588, exception=java.lang.IllegalArgumentException: A flow session can only appear once as argument.)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [1167b56f-4696-4b0b-9951-21d9ae5aa843] ---
  Timestamp: 2020-07-01T14:47:42.967Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1167b56f-4696-4b0b-9951-21d9ae5aa843] ---
  Timestamp: 2020-07-01T14:47:42.969Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:42.949Z
    2020-07-01T14:47:42.969Z
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000011, flow-id=1167b56f-4696-4b0b-9951-21d9ae5aa843, invocation_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, invocation_timestamp=2020-07-01T14:47:42.943Z, origin=Only For Testing, session_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, session_timestamp=2020-07-01T14:47:42.943Z, thread-id=153}
[WARN ] 2020-07-01T14:47:42,981Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - A flow session can only appear once as argument. [errorCode=vljw91, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/vljw91] {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000011, flow-id=1167b56f-4696-4b0b-9951-21d9ae5aa843, invocation_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, invocation_timestamp=2020-07-01T14:47:42.943Z, origin=Only For Testing, session_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, session_timestamp=2020-07-01T14:47:42.943Z, thread-id=153}
java.lang.IllegalArgumentException: A flow session can only appear once as argument.
	at net.corda.core.flows.FlowLogic.enforceNoDuplicates(FlowLogic.kt:555) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll(FlowLogic.kt:340) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll$default(FlowLogic.kt:338) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow.call(FlowParallelMessagingTests.kt:231) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow.call(FlowParallelMessagingTests.kt:224) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-01T14:47:42,983Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000011, flow-id=1167b56f-4696-4b0b-9951-21d9ae5aa843, invocation_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, invocation_timestamp=2020-07-01T14:47:42.943Z, origin=Only For Testing, session_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, session_timestamp=2020-07-01T14:47:42.943Z, thread-id=153}
[WARN ] 2020-07-01T14:47:43,018Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [1167b56f-4696-4b0b-9951-21d9ae5aa843] errored, dumping all transitions:

 --- Transition of flow [1167b56f-4696-4b0b-9951-21d9ae5aa843] ---
  Timestamp: 2020-07-01T14:47:42.946Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[1167b56f-4696-4b0b-9951-21d9ae5aa843], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, timestamp: 2020-07-01T14:47:42.943Z, entityType: Invocation, sessionId=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, timestamp: 2020-07-01T14:47:42.943Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=1A07E367B40E4C1F959034C69CDE6575D6A573D4CDA923B1C4176D62F3F6B343), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2ffb257])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2ffb257])
    SignalFlowHasStarted(flowId=[1167b56f-4696-4b0b-9951-21d9ae5aa843])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2ffb257]
    []


 --- Transition of flow [1167b56f-4696-4b0b-9951-21d9ae5aa843] ---
  Timestamp: 2020-07-01T14:47:42.947Z
  Event: InitiateFlow(destination=O=RecipientNode1, L=Madrid, C=ES, wellKnownParty=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    AddSessionBinding(flowId=[1167b56f-4696-4b0b-9951-21d9ae5aa843], sessionId=SessionId(toLong=-2412721118403211759))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:42.944Z
    2020-07-01T14:47:42.947Z
checkpoint.sessions.SessionId(toLong=-2412721118403211759): 
    null
    Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-2412721118403211759), additionalEntropy=4917914562914719990)


 --- Transition of flow [1167b56f-4696-4b0b-9951-21d9ae5aa843] ---
  Timestamp: 2020-07-01T14:47:42.962Z
  Event: Error(exception=java.lang.IllegalArgumentException: A flow session can only appear once as argument.)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:42.947Z
    2020-07-01T14:47:42.949Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=5781534540466295588, exception=java.lang.IllegalArgumentException: A flow session can only appear once as argument.)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [1167b56f-4696-4b0b-9951-21d9ae5aa843] ---
  Timestamp: 2020-07-01T14:47:42.967Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1167b56f-4696-4b0b-9951-21d9ae5aa843] ---
  Timestamp: 2020-07-01T14:47:42.969Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:42.949Z
    2020-07-01T14:47:42.969Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [1167b56f-4696-4b0b-9951-21d9ae5aa843] ---
  Timestamp: 2020-07-01T14:47:43.015Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=5781534540466295588)], sessions=[], senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf)
    CreateTransaction
    RemoveCheckpoint(id=[1167b56f-4696-4b0b-9951-21d9ae5aa843])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=1167b56f-4696-4b0b-9951-21d9ae5aa843)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-2412721118403211759)])
    RemoveFlow(flowId=[1167b56f-4696-4b0b-9951-21d9ae5aa843], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=5781534540466295588, exception=java.lang.IllegalArgumentException: A flow session can only appear once as argument.)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, timestamp: 2020-07-01T14:47:42.943Z, entityType: Invocation, sessionId=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, timestamp: 2020-07-01T14:47:42.943Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={SessionId(toLong=-2412721118403211759)=Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-2412721118403211759), additionalEntropy=4917914562914719990)}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=1A07E367B40E4C1F959034C69CDE6575D6A573D4CDA923B1C4176D62F3F6B343), errorState=Errored(errors=[FlowError(errorId=5781534540466295588, exception=java.lang.IllegalArgumentException: A flow session can only appear once as argument.)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow@5ffa6545, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:42.969Z
    2020-07-01T14:47:42.982Z
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000011, flow-id=1167b56f-4696-4b0b-9951-21d9ae5aa843, invocation_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, invocation_timestamp=2020-07-01T14:47:42.943Z, origin=Only For Testing, session_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, session_timestamp=2020-07-01T14:47:42.943Z, thread-id=153}
[WARN ] 2020-07-01T14:47:43,018Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - A flow session can only appear once as argument. [errorCode=vljw91, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/vljw91] {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000011, flow-id=1167b56f-4696-4b0b-9951-21d9ae5aa843, invocation_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, invocation_timestamp=2020-07-01T14:47:42.943Z, origin=Only For Testing, session_id=8b11d8d5-da49-4b9a-a46b-bf80c4f7ec1e, session_timestamp=2020-07-01T14:47:42.943Z, thread-id=153}
java.lang.IllegalArgumentException: A flow session can only appear once as argument.
	at net.corda.core.flows.FlowLogic.enforceNoDuplicates(FlowLogic.kt:555) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll(FlowLogic.kt:340) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll$default(FlowLogic.kt:338) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow.call(FlowParallelMessagingTests.kt:231) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$InvalidReceiveFlow.call(FlowParallelMessagingTests.kt:224) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-01T14:47:43,302Z [Mock network] corda.flow. - Flow raised an error: crash. Sending it to flow hospital to be triaged. {fiber-id=10000014, flow-id=24470faf-9fcd-46cc-b525-903ccf39ef43, invocation_id=83d5494d-c322-4060-930c-11523e27af66, invocation_timestamp=2020-07-01T14:47:43.295Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=83d5494d-c322-4060-930c-11523e27af66, session_timestamp=2020-07-01T14:47:43.295Z, thread-id=153}
[INFO ] 2020-07-01T14:47:43,303Z [Mock network] statemachine.StaffedFlowHospital. - Flow [24470faf-9fcd-46cc-b525-903ccf39ef43] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=SenderNode, L=Madrid, C=ES), trace=Trace(invocationId=83d5494d-c322-4060-930c-11523e27af66, timestamp: 2020-07-01T14:47:43.295Z, entityType: Invocation, sessionId=83d5494d-c322-4060-930c-11523e27af66, timestamp: 2020-07-01T14:47:43.295Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=RecipientNode2, L=Madrid, C=ES, sessions={SessionId(toLong=-919550330557557522)=Initiated(peerParty=O=SenderNode, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-9130508402392496491)), errors=[], deduplicationSeed=D--9130508402392496491--8626874419002354812)}, subFlowStack=[Inlined(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow, subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-919550330557557522))]), frozenFiber=3FD543D9B04AE7CF557856225501F0BD4B1B93260E4CDA94B75635DF54C50BF0), errorState=Clean, numberOfSuspends=1), flowLogic=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow@b299ed7, pendingDeduplicationHandlers=[], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=8e2425d8-5f8b-40b1-bc3a-940bdf4d4088) {fiber-id=10000014, flow-id=24470faf-9fcd-46cc-b525-903ccf39ef43, invocation_id=83d5494d-c322-4060-930c-11523e27af66, invocation_timestamp=2020-07-01T14:47:43.295Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=83d5494d-c322-4060-930c-11523e27af66, session_timestamp=2020-07-01T14:47:43.295Z, thread-id=153}
[INFO ] 2020-07-01T14:47:43,303Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000014, flow-id=24470faf-9fcd-46cc-b525-903ccf39ef43, invocation_id=83d5494d-c322-4060-930c-11523e27af66, invocation_timestamp=2020-07-01T14:47:43.295Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=83d5494d-c322-4060-930c-11523e27af66, session_timestamp=2020-07-01T14:47:43.295Z, thread-id=153}
java.lang.RuntimeException: crash
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:174) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:167) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-01T14:47:43,303Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000014, flow-id=24470faf-9fcd-46cc-b525-903ccf39ef43, invocation_id=83d5494d-c322-4060-930c-11523e27af66, invocation_timestamp=2020-07-01T14:47:43.295Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=83d5494d-c322-4060-930c-11523e27af66, session_timestamp=2020-07-01T14:47:43.295Z, thread-id=153}
java.lang.RuntimeException: crash
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:174) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:167) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-01T14:47:43,308Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [24470faf-9fcd-46cc-b525-903ccf39ef43] errored, dumping all transitions:

 --- Transition of flow [24470faf-9fcd-46cc-b525-903ccf39ef43] ---
  Timestamp: 2020-07-01T14:47:43.298Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[24470faf-9fcd-46cc-b525-903ccf39ef43], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=SenderNode, L=Madrid, C=ES), trace=Trace(invocationId=83d5494d-c322-4060-930c-11523e27af66, timestamp: 2020-07-01T14:47:43.295Z, entityType: Invocation, sessionId=83d5494d-c322-4060-930c-11523e27af66, timestamp: 2020-07-01T14:47:43.295Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=RecipientNode2, L=Madrid, C=ES, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow, subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=7D9BB8C6C1724AC19CC1BB789BBE7DD0FBF1290E84F4C14B8B5D9A56565344ED), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6d7af60f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6d7af60f])
    SignalFlowHasStarted(flowId=[24470faf-9fcd-46cc-b525-903ccf39ef43])
    SendExisting(peerParty=O=SenderNode, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9130508402392496491), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-919550330557557522), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--9130508402392496491--8626874419002354812-0-0), senderUUID=8e2425d8-5f8b-40b1-bc3a-940bdf4d4088))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-919550330557557522): 
    null
    Initiated(peerParty=O=SenderNode, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-9130508402392496491)), errors=[], deduplicationSeed=D--9130508402392496491--8626874419002354812)
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6d7af60f]
    []


 --- Transition of flow [24470faf-9fcd-46cc-b525-903ccf39ef43] ---
  Timestamp: 2020-07-01T14:47:43.301Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-919550330557557522))]), maySkipCheckpoint=false, fiber=3FD543D9B04AE7CF557856225501F0BD4B1B93260E4CDA94B75635DF54C50BF0, )
  Actions: 
    PersistCheckpoint(id=[24470faf-9fcd-46cc-b525-903ccf39ef43], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=SenderNode, L=Madrid, C=ES), trace=Trace(invocationId=83d5494d-c322-4060-930c-11523e27af66, timestamp: 2020-07-01T14:47:43.295Z, entityType: Invocation, sessionId=83d5494d-c322-4060-930c-11523e27af66, timestamp: 2020-07-01T14:47:43.295Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=RecipientNode2, L=Madrid, C=ES, sessions={SessionId(toLong=-919550330557557522)=Initiated(peerParty=O=SenderNode, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-9130508402392496491)), errors=[], deduplicationSeed=D--9130508402392496491--8626874419002354812)}, subFlowStack=[Inlined(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow, subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-919550330557557522))]), frozenFiber=3FD543D9B04AE7CF557856225501F0BD4B1B93260E4CDA94B75635DF54C50BF0), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.296Z
    2020-07-01T14:47:43.300Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=7D9BB8C6C1724AC19CC1BB789BBE7DD0FBF1290E84F4C14B8B5D9A56565344ED)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-919550330557557522))]), frozenFiber=3FD543D9B04AE7CF557856225501F0BD4B1B93260E4CDA94B75635DF54C50BF0)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [24470faf-9fcd-46cc-b525-903ccf39ef43] ---
  Timestamp: 2020-07-01T14:47:43.301Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.300Z
    2020-07-01T14:47:43.301Z
checkpoint.sessions.SessionId(toLong=-919550330557557522).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [24470faf-9fcd-46cc-b525-903ccf39ef43] ---
  Timestamp: 2020-07-01T14:47:43.303Z
  Event: Error(exception=java.lang.RuntimeException: crash)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.301Z
    2020-07-01T14:47:43.302Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6022563001805952918, exception=java.lang.RuntimeException: crash)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [24470faf-9fcd-46cc-b525-903ccf39ef43] ---
  Timestamp: 2020-07-01T14:47:43.303Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [24470faf-9fcd-46cc-b525-903ccf39ef43] ---
  Timestamp: 2020-07-01T14:47:43.303Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.302Z
    2020-07-01T14:47:43.303Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000014, flow-id=24470faf-9fcd-46cc-b525-903ccf39ef43, invocation_id=83d5494d-c322-4060-930c-11523e27af66, invocation_timestamp=2020-07-01T14:47:43.295Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=83d5494d-c322-4060-930c-11523e27af66, session_timestamp=2020-07-01T14:47:43.295Z, thread-id=153}
[WARN ] 2020-07-01T14:47:43,308Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - crash [errorCode=omfmh1, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/omfmh1] {fiber-id=10000014, flow-id=24470faf-9fcd-46cc-b525-903ccf39ef43, invocation_id=83d5494d-c322-4060-930c-11523e27af66, invocation_timestamp=2020-07-01T14:47:43.295Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=83d5494d-c322-4060-930c-11523e27af66, session_timestamp=2020-07-01T14:47:43.295Z, thread-id=153}
java.lang.RuntimeException: crash
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:174) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:167) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-01T14:47:43,308Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000014, flow-id=24470faf-9fcd-46cc-b525-903ccf39ef43, invocation_id=83d5494d-c322-4060-930c-11523e27af66, invocation_timestamp=2020-07-01T14:47:43.295Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=83d5494d-c322-4060-930c-11523e27af66, session_timestamp=2020-07-01T14:47:43.295Z, thread-id=153}
[WARN ] 2020-07-01T14:47:43,401Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [24470faf-9fcd-46cc-b525-903ccf39ef43] errored, dumping all transitions:

 --- Transition of flow [24470faf-9fcd-46cc-b525-903ccf39ef43] ---
  Timestamp: 2020-07-01T14:47:43.298Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[24470faf-9fcd-46cc-b525-903ccf39ef43], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=SenderNode, L=Madrid, C=ES), trace=Trace(invocationId=83d5494d-c322-4060-930c-11523e27af66, timestamp: 2020-07-01T14:47:43.295Z, entityType: Invocation, sessionId=83d5494d-c322-4060-930c-11523e27af66, timestamp: 2020-07-01T14:47:43.295Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=RecipientNode2, L=Madrid, C=ES, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow, subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=7D9BB8C6C1724AC19CC1BB789BBE7DD0FBF1290E84F4C14B8B5D9A56565344ED), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6d7af60f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6d7af60f])
    SignalFlowHasStarted(flowId=[24470faf-9fcd-46cc-b525-903ccf39ef43])
    SendExisting(peerParty=O=SenderNode, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9130508402392496491), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-919550330557557522), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--9130508402392496491--8626874419002354812-0-0), senderUUID=8e2425d8-5f8b-40b1-bc3a-940bdf4d4088))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-919550330557557522): 
    null
    Initiated(peerParty=O=SenderNode, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-9130508402392496491)), errors=[], deduplicationSeed=D--9130508402392496491--8626874419002354812)
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6d7af60f]
    []


 --- Transition of flow [24470faf-9fcd-46cc-b525-903ccf39ef43] ---
  Timestamp: 2020-07-01T14:47:43.301Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-919550330557557522))]), maySkipCheckpoint=false, fiber=3FD543D9B04AE7CF557856225501F0BD4B1B93260E4CDA94B75635DF54C50BF0, )
  Actions: 
    PersistCheckpoint(id=[24470faf-9fcd-46cc-b525-903ccf39ef43], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=SenderNode, L=Madrid, C=ES), trace=Trace(invocationId=83d5494d-c322-4060-930c-11523e27af66, timestamp: 2020-07-01T14:47:43.295Z, entityType: Invocation, sessionId=83d5494d-c322-4060-930c-11523e27af66, timestamp: 2020-07-01T14:47:43.295Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=RecipientNode2, L=Madrid, C=ES, sessions={SessionId(toLong=-919550330557557522)=Initiated(peerParty=O=SenderNode, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-9130508402392496491)), errors=[], deduplicationSeed=D--9130508402392496491--8626874419002354812)}, subFlowStack=[Inlined(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow, subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-919550330557557522))]), frozenFiber=3FD543D9B04AE7CF557856225501F0BD4B1B93260E4CDA94B75635DF54C50BF0), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.296Z
    2020-07-01T14:47:43.300Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=7D9BB8C6C1724AC19CC1BB789BBE7DD0FBF1290E84F4C14B8B5D9A56565344ED)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-919550330557557522))]), frozenFiber=3FD543D9B04AE7CF557856225501F0BD4B1B93260E4CDA94B75635DF54C50BF0)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [24470faf-9fcd-46cc-b525-903ccf39ef43] ---
  Timestamp: 2020-07-01T14:47:43.301Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.300Z
    2020-07-01T14:47:43.301Z
checkpoint.sessions.SessionId(toLong=-919550330557557522).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [24470faf-9fcd-46cc-b525-903ccf39ef43] ---
  Timestamp: 2020-07-01T14:47:43.303Z
  Event: Error(exception=java.lang.RuntimeException: crash)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.301Z
    2020-07-01T14:47:43.302Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6022563001805952918, exception=java.lang.RuntimeException: crash)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [24470faf-9fcd-46cc-b525-903ccf39ef43] ---
  Timestamp: 2020-07-01T14:47:43.303Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [24470faf-9fcd-46cc-b525-903ccf39ef43] ---
  Timestamp: 2020-07-01T14:47:43.303Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.302Z
    2020-07-01T14:47:43.303Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [24470faf-9fcd-46cc-b525-903ccf39ef43] ---
  Timestamp: 2020-07-01T14:47:43.399Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=6022563001805952918)], sessions=[Initiated(peerParty=O=SenderNode, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-9130508402392496491)), errors=[], deduplicationSeed=D--9130508402392496491--8626874419002354812)], senderUUID=8e2425d8-5f8b-40b1-bc3a-940bdf4d4088)
    CreateTransaction
    RemoveCheckpoint(id=[24470faf-9fcd-46cc-b525-903ccf39ef43])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=24470faf-9fcd-46cc-b525-903ccf39ef43)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-919550330557557522)])
    RemoveFlow(flowId=[24470faf-9fcd-46cc-b525-903ccf39ef43], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=6022563001805952918, exception=java.lang.RuntimeException: crash)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=SenderNode, L=Madrid, C=ES), trace=Trace(invocationId=83d5494d-c322-4060-930c-11523e27af66, timestamp: 2020-07-01T14:47:43.295Z, entityType: Invocation, sessionId=83d5494d-c322-4060-930c-11523e27af66, timestamp: 2020-07-01T14:47:43.295Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=RecipientNode2, L=Madrid, C=ES, sessions={SessionId(toLong=-919550330557557522)=Initiated(peerParty=O=SenderNode, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-9130508402392496491)), errors=[], deduplicationSeed=D--9130508402392496491--8626874419002354812)}, subFlowStack=[Inlined(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow, subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-919550330557557522))]), frozenFiber=3FD543D9B04AE7CF557856225501F0BD4B1B93260E4CDA94B75635DF54C50BF0), errorState=Errored(errors=[FlowError(errorId=6022563001805952918, exception=java.lang.RuntimeException: crash)], propagatedIndex=1, propagating=true), numberOfSuspends=1), flowLogic=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow@b299ed7, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=8e2425d8-5f8b-40b1-bc3a-940bdf4d4088))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.303Z
    2020-07-01T14:47:43.308Z
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {fiber-id=10000014, flow-id=24470faf-9fcd-46cc-b525-903ccf39ef43, invocation_id=83d5494d-c322-4060-930c-11523e27af66, invocation_timestamp=2020-07-01T14:47:43.295Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=83d5494d-c322-4060-930c-11523e27af66, session_timestamp=2020-07-01T14:47:43.295Z, thread-id=153}
[WARN ] 2020-07-01T14:47:43,401Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - crash [errorCode=omfmh1, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/omfmh1] {fiber-id=10000014, flow-id=24470faf-9fcd-46cc-b525-903ccf39ef43, invocation_id=83d5494d-c322-4060-930c-11523e27af66, invocation_timestamp=2020-07-01T14:47:43.295Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=83d5494d-c322-4060-930c-11523e27af66, session_timestamp=2020-07-01T14:47:43.295Z, thread-id=153}
java.lang.RuntimeException: crash
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:174) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:167) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-01T14:47:43,417Z [Mock network] corda.flow. - Flow raised an error: Counter-flow errored. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=fbe85ed8-6985-4250-a8b5-c1020daaec64, invocation_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, invocation_timestamp=2020-07-01T14:47:43.263Z, origin=Only For Testing, session_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, session_timestamp=2020-07-01T14:47:43.263Z, thread-id=153}
[INFO ] 2020-07-01T14:47:43,418Z [Mock network] statemachine.StaffedFlowHospital. - Flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Invocation, sessionId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={SessionId(toLong=-2662557101777846167)=Initiated(peerParty=O=RecipientNode1, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Ended, errors=[], deduplicationSeed=R--2662557101777846167-6565739917519952452), SessionId(toLong=-9130508402392496491)=Initiated(peerParty=O=RecipientNode2, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-919550330557557522)), errors=[FlowError(errorId=6022563001805952918, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R--9130508402392496491--8626874419002354812)}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))]), frozenFiber=1DD0803D6DA6143E8C438A17230EB9E18C6A8AC912CED3488024A01097D67E97), errorState=Clean, numberOfSuspends=2), flowLogic=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow@5334b0bf, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fe89ac, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c06ceea], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf) {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=fbe85ed8-6985-4250-a8b5-c1020daaec64, invocation_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, invocation_timestamp=2020-07-01T14:47:43.263Z, origin=Only For Testing, session_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, session_timestamp=2020-07-01T14:47:43.263Z, thread-id=153}
[INFO ] 2020-07-01T14:47:43,418Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=fbe85ed8-6985-4250-a8b5-c1020daaec64, invocation_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, invocation_timestamp=2020-07-01T14:47:43.263Z, origin=Only For Testing, session_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, session_timestamp=2020-07-01T14:47:43.263Z, thread-id=153}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=RecipientNode2, L=Madrid, C=ES.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:204) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:192) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:506) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap(FlowLogic.kt:318) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap$default(FlowLogic.kt:316) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll(FlowLogic.kt:341) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll$default(FlowLogic.kt:338) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:157) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:148) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-01T14:47:43,418Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=fbe85ed8-6985-4250-a8b5-c1020daaec64, invocation_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, invocation_timestamp=2020-07-01T14:47:43.263Z, origin=Only For Testing, session_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, session_timestamp=2020-07-01T14:47:43.263Z, thread-id=153}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=RecipientNode2, L=Madrid, C=ES.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:204) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:192) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:506) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap(FlowLogic.kt:318) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap$default(FlowLogic.kt:316) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll(FlowLogic.kt:341) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll$default(FlowLogic.kt:338) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:157) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:148) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-01T14:47:43,427Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] errored, dumping all transitions:

 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.266Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[fbe85ed8-6985-4250-a8b5-c1020daaec64], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Invocation, sessionId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=B285CFAABAC8C283D854F047942A790A707A67FEA96F1D8D75A40E27BCC32813), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2a0334d3])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2a0334d3])
    SignalFlowHasStarted(flowId=[fbe85ed8-6985-4250-a8b5-c1020daaec64])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2a0334d3]
    []


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.267Z
  Event: InitiateFlow(destination=O=RecipientNode1, L=Madrid, C=ES, wellKnownParty=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    AddSessionBinding(flowId=[fbe85ed8-6985-4250-a8b5-c1020daaec64], sessionId=SessionId(toLong=-2662557101777846167))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.264Z
    2020-07-01T14:47:43.267Z
checkpoint.sessions.SessionId(toLong=-2662557101777846167): 
    null
    Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-2662557101777846167), additionalEntropy=6565739917519952452)


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.268Z
  Event: InitiateFlow(destination=O=RecipientNode2, L=Madrid, C=ES, wellKnownParty=O=RecipientNode2, L=Madrid, C=ES)
  Actions: 
    AddSessionBinding(flowId=[fbe85ed8-6985-4250-a8b5-c1020daaec64], sessionId=SessionId(toLong=-9130508402392496491))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.267Z
    2020-07-01T14:47:43.268Z
checkpoint.sessions.SessionId(toLong=-9130508402392496491): 
    null
    Uninitiated(destination=O=RecipientNode2, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-9130508402392496491), additionalEntropy=-8626874419002354812)


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.273Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))=CC33BD8B0BA9466AB00C2E01540D2078320B2830830346233C7E83486B2B738B}), maySkipCheckpoint=false, fiber=3424760795475DAE39B240CF24ECB92FEE69A1BC6B256D177AB12C04CE03CD67, )
  Actions: 
    PersistCheckpoint(id=[fbe85ed8-6985-4250-a8b5-c1020daaec64], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Invocation, sessionId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={SessionId(toLong=-2662557101777846167)=Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-2662557101777846167), additionalEntropy=6565739917519952452), SessionId(toLong=-9130508402392496491)=Uninitiated(destination=O=RecipientNode2, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-9130508402392496491), additionalEntropy=-8626874419002354812)}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))=CC33BD8B0BA9466AB00C2E01540D2078320B2830830346233C7E83486B2B738B}), frozenFiber=3424760795475DAE39B240CF24ECB92FEE69A1BC6B256D177AB12C04CE03CD67), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.268Z
    2020-07-01T14:47:43.271Z
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=B285CFAABAC8C283D854F047942A790A707A67FEA96F1D8D75A40E27BCC32813)
    Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))=CC33BD8B0BA9466AB00C2E01540D2078320B2830830346233C7E83486B2B738B}), frozenFiber=3424760795475DAE39B240CF24ECB92FEE69A1BC6B256D177AB12C04CE03CD67)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.274Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[SendInitial(destination=O=RecipientNode1, L=Madrid, C=ES, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-2662557101777846167), initiationEntropy=6565739917519952452, initiatorFlowClassName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--2662557101777846167-6565739917519952452-1-0), senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf)), SendInitial(destination=O=RecipientNode2, L=Madrid, C=ES, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-9130508402392496491), initiationEntropy=-8626874419002354812, initiatorFlowClassName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--9130508402392496491--8626874419002354812-1-1), senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf))], sendExisting=[])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.271Z
    2020-07-01T14:47:43.273Z
checkpoint.sessions.SessionId(toLong=-2662557101777846167): 
    Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-2662557101777846167), additionalEntropy=6565739917519952452)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--2662557101777846167-6565739917519952452)
checkpoint.sessions.SessionId(toLong=-9130508402392496491): 
    Uninitiated(destination=O=RecipientNode2, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-9130508402392496491), additionalEntropy=-8626874419002354812)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--9130508402392496491--8626874419002354812)
isFlowResumed: 
    false
    true


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.278Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))]), maySkipCheckpoint=false, fiber=1DD0803D6DA6143E8C438A17230EB9E18C6A8AC912CED3488024A01097D67E97, )
  Actions: 
    PersistCheckpoint(id=[fbe85ed8-6985-4250-a8b5-c1020daaec64], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Invocation, sessionId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={SessionId(toLong=-2662557101777846167)=Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--2662557101777846167-6565739917519952452), SessionId(toLong=-9130508402392496491)=Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--9130508402392496491--8626874419002354812)}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))]), frozenFiber=1DD0803D6DA6143E8C438A17230EB9E18C6A8AC912CED3488024A01097D67E97), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.273Z
    2020-07-01T14:47:43.276Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))=CC33BD8B0BA9466AB00C2E01540D2078320B2830830346233C7E83486B2B738B})
    Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))])
checkpoint.flowState.frozenFiber.hash: 
    3424760795475DAE39B240CF24ECB92FEE69A1BC6B256D177AB12C04CE03CD67
    1DD0803D6DA6143E8C438A17230EB9E18C6A8AC912CED3488024A01097D67E97
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.278Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.403Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2662557101777846167), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-6547577263867518658), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, sender=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.278Z
    2020-07-01T14:47:43.403Z
checkpoint.sessions.SessionId(toLong=-2662557101777846167): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--2662557101777846167-6565739917519952452)
    Initiated(peerParty=O=RecipientNode1, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6547577263867518658)), errors=[], deduplicationSeed=R--2662557101777846167-6565739917519952452)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8]


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.403Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.408Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2662557101777846167), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, sender=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.403Z
    2020-07-01T14:47:43.408Z
checkpoint.sessions.SessionId(toLong=-2662557101777846167).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d]


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.408Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.410Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2662557101777846167), payload=net.corda.node.services.statemachine.EndSessionMessage@503af91c), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0, sender=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.408Z
    2020-07-01T14:47:43.410Z
checkpoint.sessions.SessionId(toLong=-2662557101777846167).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-6547577263867518658))
    Ended
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0]


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.410Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.413Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9130508402392496491), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-919550330557557522), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fe89ac, sender=O=RecipientNode2, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.410Z
    2020-07-01T14:47:43.413Z
checkpoint.sessions.SessionId(toLong=-9130508402392496491): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--9130508402392496491--8626874419002354812)
    Initiated(peerParty=O=RecipientNode2, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-919550330557557522)), errors=[], deduplicationSeed=R--9130508402392496491--8626874419002354812)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fe89ac]


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.413Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.416Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9130508402392496491), payload=ErrorSessionMessage(flowException=null, errorId=6022563001805952918)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c06ceea, sender=O=RecipientNode2, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.413Z
    2020-07-01T14:47:43.416Z
checkpoint.sessions.SessionId(toLong=-9130508402392496491).errors: 
    []
    [FlowError(errorId=6022563001805952918, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fe89ac]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fe89ac, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c06ceea]


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.417Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.418Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.416Z
    2020-07-01T14:47:43.417Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6022563001805952918, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.418Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.419Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.417Z
    2020-07-01T14:47:43.418Z
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=fbe85ed8-6985-4250-a8b5-c1020daaec64, invocation_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, invocation_timestamp=2020-07-01T14:47:43.263Z, origin=Only For Testing, session_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, session_timestamp=2020-07-01T14:47:43.263Z, thread-id=153}
[WARN ] 2020-07-01T14:47:43,427Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Counter-flow errored [errorCode=1w5oxwu, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/1w5oxwu] {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=fbe85ed8-6985-4250-a8b5-c1020daaec64, invocation_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, invocation_timestamp=2020-07-01T14:47:43.263Z, origin=Only For Testing, session_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, session_timestamp=2020-07-01T14:47:43.263Z, thread-id=153}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=RecipientNode2, L=Madrid, C=ES.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:204) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:192) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:506) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap(FlowLogic.kt:318) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap$default(FlowLogic.kt:316) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll(FlowLogic.kt:341) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll$default(FlowLogic.kt:338) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:157) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:148) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-01T14:47:43,428Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=fbe85ed8-6985-4250-a8b5-c1020daaec64, invocation_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, invocation_timestamp=2020-07-01T14:47:43.263Z, origin=Only For Testing, session_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, session_timestamp=2020-07-01T14:47:43.263Z, thread-id=153}
[WARN ] 2020-07-01T14:47:43,437Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] errored, dumping all transitions:

 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.266Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[fbe85ed8-6985-4250-a8b5-c1020daaec64], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Invocation, sessionId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=B285CFAABAC8C283D854F047942A790A707A67FEA96F1D8D75A40E27BCC32813), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2a0334d3])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2a0334d3])
    SignalFlowHasStarted(flowId=[fbe85ed8-6985-4250-a8b5-c1020daaec64])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2a0334d3]
    []


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.267Z
  Event: InitiateFlow(destination=O=RecipientNode1, L=Madrid, C=ES, wellKnownParty=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    AddSessionBinding(flowId=[fbe85ed8-6985-4250-a8b5-c1020daaec64], sessionId=SessionId(toLong=-2662557101777846167))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.264Z
    2020-07-01T14:47:43.267Z
checkpoint.sessions.SessionId(toLong=-2662557101777846167): 
    null
    Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-2662557101777846167), additionalEntropy=6565739917519952452)


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.268Z
  Event: InitiateFlow(destination=O=RecipientNode2, L=Madrid, C=ES, wellKnownParty=O=RecipientNode2, L=Madrid, C=ES)
  Actions: 
    AddSessionBinding(flowId=[fbe85ed8-6985-4250-a8b5-c1020daaec64], sessionId=SessionId(toLong=-9130508402392496491))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.267Z
    2020-07-01T14:47:43.268Z
checkpoint.sessions.SessionId(toLong=-9130508402392496491): 
    null
    Uninitiated(destination=O=RecipientNode2, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-9130508402392496491), additionalEntropy=-8626874419002354812)


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.273Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))=CC33BD8B0BA9466AB00C2E01540D2078320B2830830346233C7E83486B2B738B}), maySkipCheckpoint=false, fiber=3424760795475DAE39B240CF24ECB92FEE69A1BC6B256D177AB12C04CE03CD67, )
  Actions: 
    PersistCheckpoint(id=[fbe85ed8-6985-4250-a8b5-c1020daaec64], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Invocation, sessionId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={SessionId(toLong=-2662557101777846167)=Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-2662557101777846167), additionalEntropy=6565739917519952452), SessionId(toLong=-9130508402392496491)=Uninitiated(destination=O=RecipientNode2, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-9130508402392496491), additionalEntropy=-8626874419002354812)}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))=CC33BD8B0BA9466AB00C2E01540D2078320B2830830346233C7E83486B2B738B}), frozenFiber=3424760795475DAE39B240CF24ECB92FEE69A1BC6B256D177AB12C04CE03CD67), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.268Z
    2020-07-01T14:47:43.271Z
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=B285CFAABAC8C283D854F047942A790A707A67FEA96F1D8D75A40E27BCC32813)
    Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))=CC33BD8B0BA9466AB00C2E01540D2078320B2830830346233C7E83486B2B738B}), frozenFiber=3424760795475DAE39B240CF24ECB92FEE69A1BC6B256D177AB12C04CE03CD67)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.274Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[SendInitial(destination=O=RecipientNode1, L=Madrid, C=ES, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-2662557101777846167), initiationEntropy=6565739917519952452, initiatorFlowClassName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--2662557101777846167-6565739917519952452-1-0), senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf)), SendInitial(destination=O=RecipientNode2, L=Madrid, C=ES, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-9130508402392496491), initiationEntropy=-8626874419002354812, initiatorFlowClassName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--9130508402392496491--8626874419002354812-1-1), senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf))], sendExisting=[])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.271Z
    2020-07-01T14:47:43.273Z
checkpoint.sessions.SessionId(toLong=-2662557101777846167): 
    Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-2662557101777846167), additionalEntropy=6565739917519952452)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--2662557101777846167-6565739917519952452)
checkpoint.sessions.SessionId(toLong=-9130508402392496491): 
    Uninitiated(destination=O=RecipientNode2, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-9130508402392496491), additionalEntropy=-8626874419002354812)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--9130508402392496491--8626874419002354812)
isFlowResumed: 
    false
    true


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.278Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))]), maySkipCheckpoint=false, fiber=1DD0803D6DA6143E8C438A17230EB9E18C6A8AC912CED3488024A01097D67E97, )
  Actions: 
    PersistCheckpoint(id=[fbe85ed8-6985-4250-a8b5-c1020daaec64], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Invocation, sessionId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={SessionId(toLong=-2662557101777846167)=Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--2662557101777846167-6565739917519952452), SessionId(toLong=-9130508402392496491)=Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--9130508402392496491--8626874419002354812)}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))]), frozenFiber=1DD0803D6DA6143E8C438A17230EB9E18C6A8AC912CED3488024A01097D67E97), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.273Z
    2020-07-01T14:47:43.276Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))=CC33BD8B0BA9466AB00C2E01540D2078320B2830830346233C7E83486B2B738B})
    Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))])
checkpoint.flowState.frozenFiber.hash: 
    3424760795475DAE39B240CF24ECB92FEE69A1BC6B256D177AB12C04CE03CD67
    1DD0803D6DA6143E8C438A17230EB9E18C6A8AC912CED3488024A01097D67E97
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.278Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.403Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2662557101777846167), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-6547577263867518658), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, sender=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.278Z
    2020-07-01T14:47:43.403Z
checkpoint.sessions.SessionId(toLong=-2662557101777846167): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--2662557101777846167-6565739917519952452)
    Initiated(peerParty=O=RecipientNode1, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6547577263867518658)), errors=[], deduplicationSeed=R--2662557101777846167-6565739917519952452)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8]


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.403Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.408Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2662557101777846167), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, sender=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.403Z
    2020-07-01T14:47:43.408Z
checkpoint.sessions.SessionId(toLong=-2662557101777846167).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d]


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.408Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.410Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2662557101777846167), payload=net.corda.node.services.statemachine.EndSessionMessage@503af91c), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0, sender=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.408Z
    2020-07-01T14:47:43.410Z
checkpoint.sessions.SessionId(toLong=-2662557101777846167).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-6547577263867518658))
    Ended
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0]


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.410Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.413Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9130508402392496491), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-919550330557557522), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fe89ac, sender=O=RecipientNode2, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.410Z
    2020-07-01T14:47:43.413Z
checkpoint.sessions.SessionId(toLong=-9130508402392496491): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--9130508402392496491--8626874419002354812)
    Initiated(peerParty=O=RecipientNode2, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-919550330557557522)), errors=[], deduplicationSeed=R--9130508402392496491--8626874419002354812)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fe89ac]


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.413Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.416Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9130508402392496491), payload=ErrorSessionMessage(flowException=null, errorId=6022563001805952918)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c06ceea, sender=O=RecipientNode2, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.413Z
    2020-07-01T14:47:43.416Z
checkpoint.sessions.SessionId(toLong=-9130508402392496491).errors: 
    []
    [FlowError(errorId=6022563001805952918, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fe89ac]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fe89ac, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c06ceea]


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.417Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.418Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.416Z
    2020-07-01T14:47:43.417Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=6022563001805952918, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.418Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.419Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.417Z
    2020-07-01T14:47:43.418Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [fbe85ed8-6985-4250-a8b5-c1020daaec64] ---
  Timestamp: 2020-07-01T14:47:43.430Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=6022563001805952918)], sessions=[Initiated(peerParty=O=RecipientNode1, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Ended, errors=[], deduplicationSeed=R--2662557101777846167-6565739917519952452)], senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf)
    CreateTransaction
    RemoveCheckpoint(id=[fbe85ed8-6985-4250-a8b5-c1020daaec64])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fe89ac, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c06ceea])
    ReleaseSoftLocks(uuid=fbe85ed8-6985-4250-a8b5-c1020daaec64)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fe89ac, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c06ceea])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-2662557101777846167), SessionId(toLong=-9130508402392496491)])
    RemoveFlow(flowId=[fbe85ed8-6985-4250-a8b5-c1020daaec64], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=6022563001805952918, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Invocation, sessionId=bbd6db9a-32d0-415d-a8c5-bea78e45116a, timestamp: 2020-07-01T14:47:43.263Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={SessionId(toLong=-2662557101777846167)=Initiated(peerParty=O=RecipientNode1, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Ended, errors=[], deduplicationSeed=R--2662557101777846167-6565739917519952452), SessionId(toLong=-9130508402392496491)=Initiated(peerParty=O=RecipientNode2, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-919550330557557522)), errors=[FlowError(errorId=6022563001805952918, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R--9130508402392496491--8626874419002354812)}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2662557101777846167)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-9130508402392496491))]), frozenFiber=1DD0803D6DA6143E8C438A17230EB9E18C6A8AC912CED3488024A01097D67E97), errorState=Errored(errors=[FlowError(errorId=6022563001805952918, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=1, propagating=true), numberOfSuspends=2), flowLogic=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow@5334b0bf, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.418Z
    2020-07-01T14:47:43.427Z
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a1891c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c275c8d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@128beab0, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2fe89ac, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c06ceea]
    []
 {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=fbe85ed8-6985-4250-a8b5-c1020daaec64, invocation_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, invocation_timestamp=2020-07-01T14:47:43.263Z, origin=Only For Testing, session_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, session_timestamp=2020-07-01T14:47:43.263Z, thread-id=153}
[WARN ] 2020-07-01T14:47:43,437Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Counter-flow errored [errorCode=1w5oxwu, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/1w5oxwu] {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=fbe85ed8-6985-4250-a8b5-c1020daaec64, invocation_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, invocation_timestamp=2020-07-01T14:47:43.263Z, origin=Only For Testing, session_id=bbd6db9a-32d0-415d-a8c5-bea78e45116a, session_timestamp=2020-07-01T14:47:43.263Z, thread-id=153}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=RecipientNode2, L=Madrid, C=ES.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:204) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:192) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:506) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap(FlowLogic.kt:318) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap$default(FlowLogic.kt:316) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll(FlowLogic.kt:341) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll$default(FlowLogic.kt:338) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:157) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:148) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-01T14:47:43,500Z [Mock network] corda.flow. - Flow raised an error: graceful failure. Sending it to flow hospital to be triaged. {fiber-id=10000017, flow-id=1cb04767-8d1b-483d-86f1-f6e85c98822d, invocation_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, invocation_timestamp=2020-07-01T14:47:43.490Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, session_timestamp=2020-07-01T14:47:43.490Z, thread-id=153}
[INFO ] 2020-07-01T14:47:43,501Z [Mock network] statemachine.StaffedFlowHospital. - Flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=SenderNode, L=Madrid, C=ES), trace=Trace(invocationId=4caeaa89-32ff-44c5-bff0-cf970acedaa2, timestamp: 2020-07-01T14:47:43.490Z, entityType: Invocation, sessionId=4caeaa89-32ff-44c5-bff0-cf970acedaa2, timestamp: 2020-07-01T14:47:43.490Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=RecipientNode2, L=Madrid, C=ES, sessions={SessionId(toLong=-3595803383002642863)=Initiated(peerParty=O=SenderNode, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8933554466358524717)), errors=[], deduplicationSeed=D-8933554466358524717-5106562543373904654)}, subFlowStack=[Inlined(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow, subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-3595803383002642863))]), frozenFiber=41FB7CE3B098CFCD1429E8174F381D683836A28EE9471A78554D58B0CF3DC626), errorState=Clean, numberOfSuspends=1), flowLogic=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow@7abbc6ec, pendingDeduplicationHandlers=[], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=8e2425d8-5f8b-40b1-bc3a-940bdf4d4088) {fiber-id=10000017, flow-id=1cb04767-8d1b-483d-86f1-f6e85c98822d, invocation_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, invocation_timestamp=2020-07-01T14:47:43.490Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, session_timestamp=2020-07-01T14:47:43.490Z, thread-id=153}
[INFO ] 2020-07-01T14:47:43,501Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000017, flow-id=1cb04767-8d1b-483d-86f1-f6e85c98822d, invocation_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, invocation_timestamp=2020-07-01T14:47:43.490Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, session_timestamp=2020-07-01T14:47:43.490Z, thread-id=153}
net.corda.core.flows.FlowException: graceful failure
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:173) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:167) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-01T14:47:43,501Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000017, flow-id=1cb04767-8d1b-483d-86f1-f6e85c98822d, invocation_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, invocation_timestamp=2020-07-01T14:47:43.490Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, session_timestamp=2020-07-01T14:47:43.490Z, thread-id=153}
net.corda.core.flows.FlowException: graceful failure
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:173) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:167) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-01T14:47:43,503Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] errored, dumping all transitions:

 --- Transition of flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] ---
  Timestamp: 2020-07-01T14:47:43.494Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[1cb04767-8d1b-483d-86f1-f6e85c98822d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=SenderNode, L=Madrid, C=ES), trace=Trace(invocationId=4caeaa89-32ff-44c5-bff0-cf970acedaa2, timestamp: 2020-07-01T14:47:43.490Z, entityType: Invocation, sessionId=4caeaa89-32ff-44c5-bff0-cf970acedaa2, timestamp: 2020-07-01T14:47:43.490Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=RecipientNode2, L=Madrid, C=ES, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow, subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=B5F579EC3A52D58DDAD63B62C8665F7B32CF05415E8771136AE0645E5FC22AE3), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1f2ad0e1])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1f2ad0e1])
    SignalFlowHasStarted(flowId=[1cb04767-8d1b-483d-86f1-f6e85c98822d])
    SendExisting(peerParty=O=SenderNode, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8933554466358524717), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-3595803383002642863), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8933554466358524717-5106562543373904654-0-0), senderUUID=8e2425d8-5f8b-40b1-bc3a-940bdf4d4088))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3595803383002642863): 
    null
    Initiated(peerParty=O=SenderNode, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8933554466358524717)), errors=[], deduplicationSeed=D-8933554466358524717-5106562543373904654)
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1f2ad0e1]
    []


 --- Transition of flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] ---
  Timestamp: 2020-07-01T14:47:43.499Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-3595803383002642863))]), maySkipCheckpoint=false, fiber=41FB7CE3B098CFCD1429E8174F381D683836A28EE9471A78554D58B0CF3DC626, )
  Actions: 
    PersistCheckpoint(id=[1cb04767-8d1b-483d-86f1-f6e85c98822d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=SenderNode, L=Madrid, C=ES), trace=Trace(invocationId=4caeaa89-32ff-44c5-bff0-cf970acedaa2, timestamp: 2020-07-01T14:47:43.490Z, entityType: Invocation, sessionId=4caeaa89-32ff-44c5-bff0-cf970acedaa2, timestamp: 2020-07-01T14:47:43.490Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=RecipientNode2, L=Madrid, C=ES, sessions={SessionId(toLong=-3595803383002642863)=Initiated(peerParty=O=SenderNode, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8933554466358524717)), errors=[], deduplicationSeed=D-8933554466358524717-5106562543373904654)}, subFlowStack=[Inlined(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow, subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-3595803383002642863))]), frozenFiber=41FB7CE3B098CFCD1429E8174F381D683836A28EE9471A78554D58B0CF3DC626), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.491Z
    2020-07-01T14:47:43.497Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=B5F579EC3A52D58DDAD63B62C8665F7B32CF05415E8771136AE0645E5FC22AE3)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-3595803383002642863))]), frozenFiber=41FB7CE3B098CFCD1429E8174F381D683836A28EE9471A78554D58B0CF3DC626)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] ---
  Timestamp: 2020-07-01T14:47:43.499Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.497Z
    2020-07-01T14:47:43.499Z
checkpoint.sessions.SessionId(toLong=-3595803383002642863).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] ---
  Timestamp: 2020-07-01T14:47:43.502Z
  Event: Error(exception=net.corda.core.flows.FlowException: graceful failure)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.499Z
    2020-07-01T14:47:43.500Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3472812069152526347, exception=net.corda.core.flows.FlowException: graceful failure)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] ---
  Timestamp: 2020-07-01T14:47:43.502Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] ---
  Timestamp: 2020-07-01T14:47:43.502Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.500Z
    2020-07-01T14:47:43.502Z
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000017, flow-id=1cb04767-8d1b-483d-86f1-f6e85c98822d, invocation_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, invocation_timestamp=2020-07-01T14:47:43.490Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, session_timestamp=2020-07-01T14:47:43.490Z, thread-id=153}
[WARN ] 2020-07-01T14:47:43,503Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - graceful failure [errorCode=1w2zeq3, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/1w2zeq3] {fiber-id=10000017, flow-id=1cb04767-8d1b-483d-86f1-f6e85c98822d, invocation_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, invocation_timestamp=2020-07-01T14:47:43.490Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, session_timestamp=2020-07-01T14:47:43.490Z, thread-id=153}
net.corda.core.flows.FlowException: graceful failure
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:173) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:167) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-01T14:47:43,504Z [Mock network] statemachine.ActionExecutorImpl. - graceful failure [errorCode=1w2zeq3, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/1w2zeq3] {fiber-id=10000017, flow-id=1cb04767-8d1b-483d-86f1-f6e85c98822d, invocation_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, invocation_timestamp=2020-07-01T14:47:43.490Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, session_timestamp=2020-07-01T14:47:43.490Z, thread-id=153}
net.corda.core.flows.FlowException: graceful failure
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:173) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:167) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-01T14:47:43,533Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] errored, dumping all transitions:

 --- Transition of flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] ---
  Timestamp: 2020-07-01T14:47:43.494Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[1cb04767-8d1b-483d-86f1-f6e85c98822d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=SenderNode, L=Madrid, C=ES), trace=Trace(invocationId=4caeaa89-32ff-44c5-bff0-cf970acedaa2, timestamp: 2020-07-01T14:47:43.490Z, entityType: Invocation, sessionId=4caeaa89-32ff-44c5-bff0-cf970acedaa2, timestamp: 2020-07-01T14:47:43.490Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=RecipientNode2, L=Madrid, C=ES, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow, subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=B5F579EC3A52D58DDAD63B62C8665F7B32CF05415E8771136AE0645E5FC22AE3), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1f2ad0e1])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1f2ad0e1])
    SignalFlowHasStarted(flowId=[1cb04767-8d1b-483d-86f1-f6e85c98822d])
    SendExisting(peerParty=O=SenderNode, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8933554466358524717), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-3595803383002642863), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8933554466358524717-5106562543373904654-0-0), senderUUID=8e2425d8-5f8b-40b1-bc3a-940bdf4d4088))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3595803383002642863): 
    null
    Initiated(peerParty=O=SenderNode, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8933554466358524717)), errors=[], deduplicationSeed=D-8933554466358524717-5106562543373904654)
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1f2ad0e1]
    []


 --- Transition of flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] ---
  Timestamp: 2020-07-01T14:47:43.499Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-3595803383002642863))]), maySkipCheckpoint=false, fiber=41FB7CE3B098CFCD1429E8174F381D683836A28EE9471A78554D58B0CF3DC626, )
  Actions: 
    PersistCheckpoint(id=[1cb04767-8d1b-483d-86f1-f6e85c98822d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=SenderNode, L=Madrid, C=ES), trace=Trace(invocationId=4caeaa89-32ff-44c5-bff0-cf970acedaa2, timestamp: 2020-07-01T14:47:43.490Z, entityType: Invocation, sessionId=4caeaa89-32ff-44c5-bff0-cf970acedaa2, timestamp: 2020-07-01T14:47:43.490Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=RecipientNode2, L=Madrid, C=ES, sessions={SessionId(toLong=-3595803383002642863)=Initiated(peerParty=O=SenderNode, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8933554466358524717)), errors=[], deduplicationSeed=D-8933554466358524717-5106562543373904654)}, subFlowStack=[Inlined(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow, subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-3595803383002642863))]), frozenFiber=41FB7CE3B098CFCD1429E8174F381D683836A28EE9471A78554D58B0CF3DC626), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.491Z
    2020-07-01T14:47:43.497Z
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=B5F579EC3A52D58DDAD63B62C8665F7B32CF05415E8771136AE0645E5FC22AE3)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-3595803383002642863))]), frozenFiber=41FB7CE3B098CFCD1429E8174F381D683836A28EE9471A78554D58B0CF3DC626)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] ---
  Timestamp: 2020-07-01T14:47:43.499Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.497Z
    2020-07-01T14:47:43.499Z
checkpoint.sessions.SessionId(toLong=-3595803383002642863).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] ---
  Timestamp: 2020-07-01T14:47:43.502Z
  Event: Error(exception=net.corda.core.flows.FlowException: graceful failure)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.499Z
    2020-07-01T14:47:43.500Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3472812069152526347, exception=net.corda.core.flows.FlowException: graceful failure)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] ---
  Timestamp: 2020-07-01T14:47:43.502Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] ---
  Timestamp: 2020-07-01T14:47:43.502Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.500Z
    2020-07-01T14:47:43.502Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [1cb04767-8d1b-483d-86f1-f6e85c98822d] ---
  Timestamp: 2020-07-01T14:47:43.532Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.flows.FlowException: graceful failure, errorId=-3472812069152526347)], sessions=[Initiated(peerParty=O=SenderNode, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8933554466358524717)), errors=[], deduplicationSeed=D-8933554466358524717-5106562543373904654)], senderUUID=8e2425d8-5f8b-40b1-bc3a-940bdf4d4088)
    CreateTransaction
    RemoveCheckpoint(id=[1cb04767-8d1b-483d-86f1-f6e85c98822d])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=1cb04767-8d1b-483d-86f1-f6e85c98822d)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-3595803383002642863)])
    RemoveFlow(flowId=[1cb04767-8d1b-483d-86f1-f6e85c98822d], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-3472812069152526347, exception=net.corda.core.flows.FlowException: graceful failure)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=SenderNode, L=Madrid, C=ES), trace=Trace(invocationId=4caeaa89-32ff-44c5-bff0-cf970acedaa2, timestamp: 2020-07-01T14:47:43.490Z, entityType: Invocation, sessionId=4caeaa89-32ff-44c5-bff0-cf970acedaa2, timestamp: 2020-07-01T14:47:43.490Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=RecipientNode2, L=Madrid, C=ES, sessions={SessionId(toLong=-3595803383002642863)=Initiated(peerParty=O=SenderNode, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8933554466358524717)), errors=[], deduplicationSeed=D-8933554466358524717-5106562543373904654)}, subFlowStack=[Inlined(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow, subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=SenderNode, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-3595803383002642863))]), frozenFiber=41FB7CE3B098CFCD1429E8174F381D683836A28EE9471A78554D58B0CF3DC626), errorState=Errored(errors=[FlowError(errorId=-3472812069152526347, exception=net.corda.core.flows.FlowException: graceful failure)], propagatedIndex=1, propagating=true), numberOfSuspends=1), flowLogic=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow@7abbc6ec, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=8e2425d8-5f8b-40b1-bc3a-940bdf4d4088))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.502Z
    2020-07-01T14:47:43.503Z
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {fiber-id=10000017, flow-id=1cb04767-8d1b-483d-86f1-f6e85c98822d, invocation_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, invocation_timestamp=2020-07-01T14:47:43.490Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, session_timestamp=2020-07-01T14:47:43.490Z, thread-id=153}
[WARN ] 2020-07-01T14:47:43,533Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - graceful failure [errorCode=1w2zeq3, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/1w2zeq3] {fiber-id=10000017, flow-id=1cb04767-8d1b-483d-86f1-f6e85c98822d, invocation_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, invocation_timestamp=2020-07-01T14:47:43.490Z, origin=O=SenderNode, L=Madrid, C=ES, session_id=4caeaa89-32ff-44c5-bff0-cf970acedaa2, session_timestamp=2020-07-01T14:47:43.490Z, thread-id=153}
net.corda.core.flows.FlowException: graceful failure
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:173) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$RecipientFlow.call(FlowParallelMessagingTests.kt:167) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-01T14:47:43,594Z [Mock network] corda.flow. - Flow raised an error: graceful failure. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000015, flow-id=03d29d21-eba2-4821-aba1-3026bc735ceb, invocation_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, invocation_timestamp=2020-07-01T14:47:43.447Z, origin=Only For Testing, session_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, session_timestamp=2020-07-01T14:47:43.447Z, thread-id=153}
[INFO ] 2020-07-01T14:47:43,594Z [Mock network] statemachine.StaffedFlowHospital. - Flow [03d29d21-eba2-4821-aba1-3026bc735ceb] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Invocation, sessionId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={SessionId(toLong=-1297941331043386872)=Initiated(peerParty=O=RecipientNode1, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Ended, errors=[], deduplicationSeed=R--1297941331043386872--3788975151157282276), SessionId(toLong=8933554466358524717)=Initiated(peerParty=O=RecipientNode2, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3595803383002642863)), errors=[FlowError(errorId=-3472812069152526347, exception=net.corda.core.flows.FlowException: graceful failure)], deduplicationSeed=R-8933554466358524717-5106562543373904654)}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))]), frozenFiber=935FA1CB6D36BABE089BCF3EE5D604058F62503F505CD954C179CFF99EC664F5), errorState=Clean, numberOfSuspends=2), flowLogic=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow@2aa0d8a9, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c464950, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5ba4b010], isFlowResumed=true, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, isKilled=false, senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf) {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000015, flow-id=03d29d21-eba2-4821-aba1-3026bc735ceb, invocation_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, invocation_timestamp=2020-07-01T14:47:43.447Z, origin=Only For Testing, session_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, session_timestamp=2020-07-01T14:47:43.447Z, thread-id=153}
[INFO ] 2020-07-01T14:47:43,594Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000015, flow-id=03d29d21-eba2-4821-aba1-3026bc735ceb, invocation_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, invocation_timestamp=2020-07-01T14:47:43.447Z, origin=Only For Testing, session_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, session_timestamp=2020-07-01T14:47:43.447Z, thread-id=153}
net.corda.core.flows.FlowException: graceful failure
	at Received counter-flow exception from peer O=RecipientNode2, L=Madrid, C=ES.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:204) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:192) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:506) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap(FlowLogic.kt:318) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap$default(FlowLogic.kt:316) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll(FlowLogic.kt:341) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll$default(FlowLogic.kt:338) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:157) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:148) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-01T14:47:43,594Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000015, flow-id=03d29d21-eba2-4821-aba1-3026bc735ceb, invocation_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, invocation_timestamp=2020-07-01T14:47:43.447Z, origin=Only For Testing, session_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, session_timestamp=2020-07-01T14:47:43.447Z, thread-id=153}
net.corda.core.flows.FlowException: graceful failure
	at Received counter-flow exception from peer O=RecipientNode2, L=Madrid, C=ES.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:204) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:192) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:506) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap(FlowLogic.kt:318) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap$default(FlowLogic.kt:316) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll(FlowLogic.kt:341) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll$default(FlowLogic.kt:338) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:157) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:148) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-01T14:47:43,599Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [03d29d21-eba2-4821-aba1-3026bc735ceb] errored, dumping all transitions:

 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.453Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[03d29d21-eba2-4821-aba1-3026bc735ceb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Invocation, sessionId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DAD222E7D6F43C96CC24AD67587C0C70D002AC26547B060EBF7C7260D46EE177), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5cb3e566])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5cb3e566])
    SignalFlowHasStarted(flowId=[03d29d21-eba2-4821-aba1-3026bc735ceb])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5cb3e566]
    []


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.454Z
  Event: InitiateFlow(destination=O=RecipientNode1, L=Madrid, C=ES, wellKnownParty=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    AddSessionBinding(flowId=[03d29d21-eba2-4821-aba1-3026bc735ceb], sessionId=SessionId(toLong=-1297941331043386872))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.450Z
    2020-07-01T14:47:43.454Z
checkpoint.sessions.SessionId(toLong=-1297941331043386872): 
    null
    Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-1297941331043386872), additionalEntropy=-3788975151157282276)


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.456Z
  Event: InitiateFlow(destination=O=RecipientNode2, L=Madrid, C=ES, wellKnownParty=O=RecipientNode2, L=Madrid, C=ES)
  Actions: 
    AddSessionBinding(flowId=[03d29d21-eba2-4821-aba1-3026bc735ceb], sessionId=SessionId(toLong=8933554466358524717))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.454Z
    2020-07-01T14:47:43.456Z
checkpoint.sessions.SessionId(toLong=8933554466358524717): 
    null
    Uninitiated(destination=O=RecipientNode2, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8933554466358524717), additionalEntropy=5106562543373904654)


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.460Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))=913A3759134BF6646927433C0D3315CBC11F31B0C5B3E4B299AF30D1499AA1EB}), maySkipCheckpoint=false, fiber=B52511B3EAD4C05F6492ECFA23E84EFDF6BCF2FADF02D26FAB899FFA9266ACFD, )
  Actions: 
    PersistCheckpoint(id=[03d29d21-eba2-4821-aba1-3026bc735ceb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Invocation, sessionId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={SessionId(toLong=-1297941331043386872)=Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-1297941331043386872), additionalEntropy=-3788975151157282276), SessionId(toLong=8933554466358524717)=Uninitiated(destination=O=RecipientNode2, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8933554466358524717), additionalEntropy=5106562543373904654)}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))=913A3759134BF6646927433C0D3315CBC11F31B0C5B3E4B299AF30D1499AA1EB}), frozenFiber=B52511B3EAD4C05F6492ECFA23E84EFDF6BCF2FADF02D26FAB899FFA9266ACFD), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.456Z
    2020-07-01T14:47:43.458Z
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=DAD222E7D6F43C96CC24AD67587C0C70D002AC26547B060EBF7C7260D46EE177)
    Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))=913A3759134BF6646927433C0D3315CBC11F31B0C5B3E4B299AF30D1499AA1EB}), frozenFiber=B52511B3EAD4C05F6492ECFA23E84EFDF6BCF2FADF02D26FAB899FFA9266ACFD)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.461Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[SendInitial(destination=O=RecipientNode1, L=Madrid, C=ES, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-1297941331043386872), initiationEntropy=-3788975151157282276, initiatorFlowClassName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--1297941331043386872--3788975151157282276-1-0), senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf)), SendInitial(destination=O=RecipientNode2, L=Madrid, C=ES, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=8933554466358524717), initiationEntropy=5106562543373904654, initiatorFlowClassName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-8933554466358524717-5106562543373904654-1-1), senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf))], sendExisting=[])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.458Z
    2020-07-01T14:47:43.460Z
checkpoint.sessions.SessionId(toLong=-1297941331043386872): 
    Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-1297941331043386872), additionalEntropy=-3788975151157282276)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--1297941331043386872--3788975151157282276)
checkpoint.sessions.SessionId(toLong=8933554466358524717): 
    Uninitiated(destination=O=RecipientNode2, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8933554466358524717), additionalEntropy=5106562543373904654)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8933554466358524717-5106562543373904654)
isFlowResumed: 
    false
    true


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.465Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))]), maySkipCheckpoint=false, fiber=935FA1CB6D36BABE089BCF3EE5D604058F62503F505CD954C179CFF99EC664F5, )
  Actions: 
    PersistCheckpoint(id=[03d29d21-eba2-4821-aba1-3026bc735ceb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Invocation, sessionId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={SessionId(toLong=-1297941331043386872)=Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--1297941331043386872--3788975151157282276), SessionId(toLong=8933554466358524717)=Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8933554466358524717-5106562543373904654)}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))]), frozenFiber=935FA1CB6D36BABE089BCF3EE5D604058F62503F505CD954C179CFF99EC664F5), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.460Z
    2020-07-01T14:47:43.463Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))=913A3759134BF6646927433C0D3315CBC11F31B0C5B3E4B299AF30D1499AA1EB})
    Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))])
checkpoint.flowState.frozenFiber.hash: 
    B52511B3EAD4C05F6492ECFA23E84EFDF6BCF2FADF02D26FAB899FFA9266ACFD
    935FA1CB6D36BABE089BCF3EE5D604058F62503F505CD954C179CFF99EC664F5
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.465Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.539Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1297941331043386872), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7637185557145894256), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, sender=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.465Z
    2020-07-01T14:47:43.539Z
checkpoint.sessions.SessionId(toLong=-1297941331043386872): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--1297941331043386872--3788975151157282276)
    Initiated(peerParty=O=RecipientNode1, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7637185557145894256)), errors=[], deduplicationSeed=R--1297941331043386872--3788975151157282276)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b]


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.539Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.541Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1297941331043386872), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, sender=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.539Z
    2020-07-01T14:47:43.541Z
checkpoint.sessions.SessionId(toLong=-1297941331043386872).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c]


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.541Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.545Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1297941331043386872), payload=net.corda.node.services.statemachine.EndSessionMessage@503af91c), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81, sender=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.541Z
    2020-07-01T14:47:43.545Z
checkpoint.sessions.SessionId(toLong=-1297941331043386872).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=7637185557145894256))
    Ended
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81]


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.545Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.550Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8933554466358524717), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-3595803383002642863), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c464950, sender=O=RecipientNode2, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.545Z
    2020-07-01T14:47:43.550Z
checkpoint.sessions.SessionId(toLong=8933554466358524717): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8933554466358524717-5106562543373904654)
    Initiated(peerParty=O=RecipientNode2, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3595803383002642863)), errors=[], deduplicationSeed=R-8933554466358524717-5106562543373904654)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c464950]


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.550Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.593Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8933554466358524717), payload=ErrorSessionMessage(flowException=net.corda.core.flows.FlowException: graceful failure, errorId=-3472812069152526347)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5ba4b010, sender=O=RecipientNode2, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.550Z
    2020-07-01T14:47:43.593Z
checkpoint.sessions.SessionId(toLong=8933554466358524717).errors: 
    []
    [FlowError(errorId=-3472812069152526347, exception=net.corda.core.flows.FlowException: graceful failure)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c464950]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c464950, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5ba4b010]


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.593Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.FlowException: graceful failure)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.594Z
  Event: Error(exception=net.corda.core.flows.FlowException: graceful failure)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.593Z
    2020-07-01T14:47:43.594Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3472812069152526347, exception=net.corda.core.flows.FlowException: graceful failure)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.594Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.595Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.594Z
    2020-07-01T14:47:43.595Z
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000015, flow-id=03d29d21-eba2-4821-aba1-3026bc735ceb, invocation_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, invocation_timestamp=2020-07-01T14:47:43.447Z, origin=Only For Testing, session_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, session_timestamp=2020-07-01T14:47:43.447Z, thread-id=153}
[WARN ] 2020-07-01T14:47:43,599Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - graceful failure [errorCode=1hcxidj, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/1hcxidj] {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000015, flow-id=03d29d21-eba2-4821-aba1-3026bc735ceb, invocation_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, invocation_timestamp=2020-07-01T14:47:43.447Z, origin=Only For Testing, session_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, session_timestamp=2020-07-01T14:47:43.447Z, thread-id=153}
net.corda.core.flows.FlowException: graceful failure
	at Received counter-flow exception from peer O=RecipientNode2, L=Madrid, C=ES.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:204) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:192) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:506) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap(FlowLogic.kt:318) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap$default(FlowLogic.kt:316) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll(FlowLogic.kt:341) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll$default(FlowLogic.kt:338) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:157) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:148) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[WARN ] 2020-07-01T14:47:43,599Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000015, flow-id=03d29d21-eba2-4821-aba1-3026bc735ceb, invocation_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, invocation_timestamp=2020-07-01T14:47:43.447Z, origin=Only For Testing, session_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, session_timestamp=2020-07-01T14:47:43.447Z, thread-id=153}
[WARN ] 2020-07-01T14:47:43,616Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [03d29d21-eba2-4821-aba1-3026bc735ceb] errored, dumping all transitions:

 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.453Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[03d29d21-eba2-4821-aba1-3026bc735ceb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Invocation, sessionId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DAD222E7D6F43C96CC24AD67587C0C70D002AC26547B060EBF7C7260D46EE177), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5cb3e566])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5cb3e566])
    SignalFlowHasStarted(flowId=[03d29d21-eba2-4821-aba1-3026bc735ceb])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5cb3e566]
    []


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.454Z
  Event: InitiateFlow(destination=O=RecipientNode1, L=Madrid, C=ES, wellKnownParty=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    AddSessionBinding(flowId=[03d29d21-eba2-4821-aba1-3026bc735ceb], sessionId=SessionId(toLong=-1297941331043386872))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.450Z
    2020-07-01T14:47:43.454Z
checkpoint.sessions.SessionId(toLong=-1297941331043386872): 
    null
    Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-1297941331043386872), additionalEntropy=-3788975151157282276)


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.456Z
  Event: InitiateFlow(destination=O=RecipientNode2, L=Madrid, C=ES, wellKnownParty=O=RecipientNode2, L=Madrid, C=ES)
  Actions: 
    AddSessionBinding(flowId=[03d29d21-eba2-4821-aba1-3026bc735ceb], sessionId=SessionId(toLong=8933554466358524717))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.454Z
    2020-07-01T14:47:43.456Z
checkpoint.sessions.SessionId(toLong=8933554466358524717): 
    null
    Uninitiated(destination=O=RecipientNode2, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8933554466358524717), additionalEntropy=5106562543373904654)


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.460Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))=913A3759134BF6646927433C0D3315CBC11F31B0C5B3E4B299AF30D1499AA1EB}), maySkipCheckpoint=false, fiber=B52511B3EAD4C05F6492ECFA23E84EFDF6BCF2FADF02D26FAB899FFA9266ACFD, )
  Actions: 
    PersistCheckpoint(id=[03d29d21-eba2-4821-aba1-3026bc735ceb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Invocation, sessionId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={SessionId(toLong=-1297941331043386872)=Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-1297941331043386872), additionalEntropy=-3788975151157282276), SessionId(toLong=8933554466358524717)=Uninitiated(destination=O=RecipientNode2, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8933554466358524717), additionalEntropy=5106562543373904654)}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))=913A3759134BF6646927433C0D3315CBC11F31B0C5B3E4B299AF30D1499AA1EB}), frozenFiber=B52511B3EAD4C05F6492ECFA23E84EFDF6BCF2FADF02D26FAB899FFA9266ACFD), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.456Z
    2020-07-01T14:47:43.458Z
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=DAD222E7D6F43C96CC24AD67587C0C70D002AC26547B060EBF7C7260D46EE177)
    Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))=913A3759134BF6646927433C0D3315CBC11F31B0C5B3E4B299AF30D1499AA1EB}), frozenFiber=B52511B3EAD4C05F6492ECFA23E84EFDF6BCF2FADF02D26FAB899FFA9266ACFD)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.461Z
  Event: DoRemainingWork
  Actions: 
    SendMultiple(sendInitial=[SendInitial(destination=O=RecipientNode1, L=Madrid, C=ES, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-1297941331043386872), initiationEntropy=-3788975151157282276, initiatorFlowClassName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--1297941331043386872--3788975151157282276-1-0), senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf)), SendInitial(destination=O=RecipientNode2, L=Madrid, C=ES, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=8933554466358524717), initiationEntropy=5106562543373904654, initiatorFlowClassName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-8933554466358524717-5106562543373904654-1-1), senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf))], sendExisting=[])
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.458Z
    2020-07-01T14:47:43.460Z
checkpoint.sessions.SessionId(toLong=-1297941331043386872): 
    Uninitiated(destination=O=RecipientNode1, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-1297941331043386872), additionalEntropy=-3788975151157282276)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--1297941331043386872--3788975151157282276)
checkpoint.sessions.SessionId(toLong=8933554466358524717): 
    Uninitiated(destination=O=RecipientNode2, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8933554466358524717), additionalEntropy=5106562543373904654)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8933554466358524717-5106562543373904654)
isFlowResumed: 
    false
    true


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.465Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))]), maySkipCheckpoint=false, fiber=935FA1CB6D36BABE089BCF3EE5D604058F62503F505CD954C179CFF99EC664F5, )
  Actions: 
    PersistCheckpoint(id=[03d29d21-eba2-4821-aba1-3026bc735ceb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Invocation, sessionId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={SessionId(toLong=-1297941331043386872)=Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--1297941331043386872--3788975151157282276), SessionId(toLong=8933554466358524717)=Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8933554466358524717-5106562543373904654)}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))]), frozenFiber=935FA1CB6D36BABE089BCF3EE5D604058F62503F505CD954C179CFF99EC664F5), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.460Z
    2020-07-01T14:47:43.463Z
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872))=F0F0A9F19C2071FCFE1D8437A3AF703EDB4B14A2E60D1AA0715AD393845C1FFB, FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))=913A3759134BF6646927433C0D3315CBC11F31B0C5B3E4B299AF30D1499AA1EB})
    Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))])
checkpoint.flowState.frozenFiber.hash: 
    B52511B3EAD4C05F6492ECFA23E84EFDF6BCF2FADF02D26FAB899FFA9266ACFD
    935FA1CB6D36BABE089BCF3EE5D604058F62503F505CD954C179CFF99EC664F5
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.465Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.539Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1297941331043386872), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7637185557145894256), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, sender=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.465Z
    2020-07-01T14:47:43.539Z
checkpoint.sessions.SessionId(toLong=-1297941331043386872): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--1297941331043386872--3788975151157282276)
    Initiated(peerParty=O=RecipientNode1, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7637185557145894256)), errors=[], deduplicationSeed=R--1297941331043386872--3788975151157282276)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b]


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.539Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.541Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1297941331043386872), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, sender=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.539Z
    2020-07-01T14:47:43.541Z
checkpoint.sessions.SessionId(toLong=-1297941331043386872).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c]


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.541Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.545Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1297941331043386872), payload=net.corda.node.services.statemachine.EndSessionMessage@503af91c), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81, sender=O=RecipientNode1, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.541Z
    2020-07-01T14:47:43.545Z
checkpoint.sessions.SessionId(toLong=-1297941331043386872).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=7637185557145894256))
    Ended
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81]


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.545Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.550Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8933554466358524717), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-3595803383002642863), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c464950, sender=O=RecipientNode2, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.545Z
    2020-07-01T14:47:43.550Z
checkpoint.sessions.SessionId(toLong=8933554466358524717): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8933554466358524717-5106562543373904654)
    Initiated(peerParty=O=RecipientNode2, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3595803383002642863)), errors=[], deduplicationSeed=R-8933554466358524717-5106562543373904654)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c464950]


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.550Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.593Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8933554466358524717), payload=ErrorSessionMessage(flowException=net.corda.core.flows.FlowException: graceful failure, errorId=-3472812069152526347)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5ba4b010, sender=O=RecipientNode2, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.550Z
    2020-07-01T14:47:43.593Z
checkpoint.sessions.SessionId(toLong=8933554466358524717).errors: 
    []
    [FlowError(errorId=-3472812069152526347, exception=net.corda.core.flows.FlowException: graceful failure)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c464950]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c464950, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5ba4b010]


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.593Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.FlowException: graceful failure)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.594Z
  Event: Error(exception=net.corda.core.flows.FlowException: graceful failure)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.593Z
    2020-07-01T14:47:43.594Z
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3472812069152526347, exception=net.corda.core.flows.FlowException: graceful failure)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.594Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.595Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.594Z
    2020-07-01T14:47:43.595Z
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [03d29d21-eba2-4821-aba1-3026bc735ceb] ---
  Timestamp: 2020-07-01T14:47:43.609Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-3472812069152526347)], sessions=[Initiated(peerParty=O=RecipientNode1, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Ended, errors=[], deduplicationSeed=R--1297941331043386872--3788975151157282276)], senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf)
    CreateTransaction
    RemoveCheckpoint(id=[03d29d21-eba2-4821-aba1-3026bc735ceb])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c464950, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5ba4b010])
    ReleaseSoftLocks(uuid=03d29d21-eba2-4821-aba1-3026bc735ceb)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c464950, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5ba4b010])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-1297941331043386872), SessionId(toLong=8933554466358524717)])
    RemoveFlow(flowId=[03d29d21-eba2-4821-aba1-3026bc735ceb], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-3472812069152526347, exception=net.corda.core.flows.FlowException: graceful failure)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES)), trace=Trace(invocationId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Invocation, sessionId=acb39b4f-dc5e-46de-a8f1-c95798a11260, timestamp: 2020-07-01T14:47:43.447Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=SenderNode, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=SenderNode, L=Madrid, C=ES, sessions={SessionId(toLong=-1297941331043386872)=Initiated(peerParty=O=RecipientNode1, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Ended, errors=[], deduplicationSeed=R--1297941331043386872--3788975151157282276), SessionId(toLong=8933554466358524717)=Initiated(peerParty=O=RecipientNode2, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3595803383002642863)), errors=[FlowError(errorId=-3472812069152526347, exception=net.corda.core.flows.FlowException: graceful failure)], deduplicationSeed=R-8933554466358524717-5106562543373904654)}, subFlowStack=[Initiating(flowClass=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, classToInitiateWith=class net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=7, corDappName=net.corda.examples.pingpong.flows.FlowParallelMessagingTests_1_7_94baeabf-1013-426c-a853-fe9265425153, corDappHash=9893A4D0E4286E72F36401C7108B2B343032041D5F1669E1409C82D86C6C5BEA), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=RecipientNode1, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1297941331043386872)), FlowSessionImpl(destination=O=RecipientNode2, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=8933554466358524717))]), frozenFiber=935FA1CB6D36BABE089BCF3EE5D604058F62503F505CD954C179CFF99EC664F5), errorState=Errored(errors=[FlowError(errorId=-3472812069152526347, exception=net.corda.core.flows.FlowException: graceful failure)], propagatedIndex=1, propagating=true), numberOfSuspends=2), flowLogic=net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow@2aa0d8a9, pendingDeduplicationHandlers=[], isFlowResumed=false, isWaitingForFuture=false, future=null, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, isKilled=false, senderUUID=d2710dd6-bb39-4072-80cd-05460bd4adcf))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.timestamp: 
    2020-07-01T14:47:43.595Z
    2020-07-01T14:47:43.599Z
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541e6b7b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@12e2be5c, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0a5f81, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c464950, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5ba4b010]
    []
 {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000015, flow-id=03d29d21-eba2-4821-aba1-3026bc735ceb, invocation_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, invocation_timestamp=2020-07-01T14:47:43.447Z, origin=Only For Testing, session_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, session_timestamp=2020-07-01T14:47:43.447Z, thread-id=153}
[WARN ] 2020-07-01T14:47:43,616Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - graceful failure [errorCode=1hcxidj, moreInformationAt=https://errors.corda.net/OS/4.5-RC02/1hcxidj] {actor_id=Only For Testing, actor_owning_identity=O=SenderNode, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000015, flow-id=03d29d21-eba2-4821-aba1-3026bc735ceb, invocation_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, invocation_timestamp=2020-07-01T14:47:43.447Z, origin=Only For Testing, session_id=acb39b4f-dc5e-46de-a8f1-c95798a11260, session_timestamp=2020-07-01T14:47:43.447Z, thread-id=153}
net.corda.core.flows.FlowException: graceful failure
	at Received counter-flow exception from peer O=RecipientNode2, L=Madrid, C=ES.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:204) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:192) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:506) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap(FlowLogic.kt:318) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAllMap$default(FlowLogic.kt:316) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll(FlowLogic.kt:341) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.core.flows.FlowLogic.receiveAll$default(FlowLogic.kt:338) ~[corda-core-4.5-RC02.jar:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:157) ~[test/:?]
	at net.corda.examples.pingpong.flows.FlowParallelMessagingTests$SenderFlow.call(FlowParallelMessagingTests.kt:148) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:299) ~[corda-node-4.5-RC02.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:66) ~[corda-node-4.5-RC02.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_171]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_171]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_171]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_171]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.5-RC02.jar:?]
[INFO ] 2020-07-01T14:47:43,626Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-1) {}
[INFO ] 2020-07-01T14:47:43,677Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-2) {}
[INFO ] 2020-07-01T14:47:43,687Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-3) {}
[INFO ] 2020-07-01T14:47:43,696Z [Test worker] persistence.CordaPersistence. - Closing HikariDataSource (HikariPool-4) {}
